angular.module("ui.bootstrap",["ui.bootstrap.tpls","ui.bootstrap.collapse","ui.bootstrap.tabindex","ui.bootstrap.accordion","ui.bootstrap.alert","ui.bootstrap.buttons","ui.bootstrap.carousel","ui.bootstrap.dateparser","ui.bootstrap.isClass","ui.bootstrap.datepicker","ui.bootstrap.position","ui.bootstrap.datepickerPopup","ui.bootstrap.debounce","ui.bootstrap.dropdown","ui.bootstrap.stackedMap","ui.bootstrap.modal","ui.bootstrap.paging","ui.bootstrap.pager","ui.bootstrap.pagination","ui.bootstrap.tooltip","ui.bootstrap.popover","ui.bootstrap.progressbar","ui.bootstrap.rating","ui.bootstrap.tabs","ui.bootstrap.timepicker","ui.bootstrap.typeahead"]),angular.module("ui.bootstrap.tpls",["uib/template/accordion/accordion-group.html","uib/template/accordion/accordion.html","uib/template/alert/alert.html","uib/template/carousel/carousel.html","uib/template/carousel/slide.html","uib/template/datepicker/datepicker.html","uib/template/datepicker/day.html","uib/template/datepicker/month.html","uib/template/datepicker/year.html","uib/template/datepickerPopup/popup.html","uib/template/modal/window.html","uib/template/pager/pager.html","uib/template/pagination/pagination.html","uib/template/tooltip/tooltip-html-popup.html","uib/template/tooltip/tooltip-popup.html","uib/template/tooltip/tooltip-template-popup.html","uib/template/popover/popover-html.html","uib/template/popover/popover-template.html","uib/template/popover/popover.html","uib/template/progressbar/bar.html","uib/template/progressbar/progress.html","uib/template/progressbar/progressbar.html","uib/template/rating/rating.html","uib/template/tabs/tab.html","uib/template/tabs/tabset.html","uib/template/timepicker/timepicker.html","uib/template/typeahead/typeahead-match.html","uib/template/typeahead/typeahead-popup.html"]),angular.module("ui.bootstrap.collapse",[]).directive("uibCollapse",["$animate","$q","$parse","$injector",function(e,t,n,a){var i=a.has("$animateCss")?a.get("$animateCss"):null;return{link:function(a,o,r){var l=n(r.expanding),s=n(r.expanded),u=n(r.collapsing),p=n(r.collapsed),c=!1,d={},m={};function f(e){return c?{width:e.scrollWidth+"px"}:{height:e.scrollHeight+"px"}}function h(){o.removeClass("collapsing").addClass("collapse").css(d),s(a)}function g(){o.css(m),o.removeClass("collapsing").addClass("collapse"),p(a)}!function(){(c=!!("horizontal"in r))?(d={width:""},m={width:"0"}):(d={height:""},m={height:"0"});a.$eval(r.uibCollapse)||o.addClass("in").addClass("collapse").attr("aria-expanded",!0).attr("aria-hidden",!1).css(d)}(),a.$watch(r.uibCollapse,(function(n){n?function(){if(!o.hasClass("collapse")&&!o.hasClass("in"))return g();t.resolve(u(a)).then((function(){o.css(f(o[0])).removeClass("collapse").addClass("collapsing").attr("aria-expanded",!1).attr("aria-hidden",!0),i?i(o,{removeClass:"in",to:m}).start().finally(g):e.removeClass(o,"in",{to:m}).then(g)}))}():o.hasClass("collapse")&&o.hasClass("in")||t.resolve(l(a)).then((function(){o.removeClass("collapse").addClass("collapsing").attr("aria-expanded",!0).attr("aria-hidden",!1),i?i(o,{addClass:"in",easing:"ease",css:{overflow:"hidden"},to:f(o[0])}).start().finally(h):e.addClass(o,"in",{css:{overflow:"hidden"},to:f(o[0])}).then(h)}))}))}}}]),angular.module("ui.bootstrap.tabindex",[]).directive("uibTabindexToggle",(function(){return{restrict:"A",link:function(e,t,n){n.$observe("disabled",(function(e){n.$set("tabindex",e?-1:null)}))}}})),angular.module("ui.bootstrap.accordion",["ui.bootstrap.collapse","ui.bootstrap.tabindex"]).constant("uibAccordionConfig",{closeOthers:!0}).controller("UibAccordionController",["$scope","$attrs","uibAccordionConfig",function(e,t,n){this.groups=[],this.closeOthers=function(a){(angular.isDefined(t.closeOthers)?e.$eval(t.closeOthers):n.closeOthers)&&angular.forEach(this.groups,(function(e){e!==a&&(e.isOpen=!1)}))},this.addGroup=function(e){var t=this;this.groups.push(e),e.$on("$destroy",(function(n){t.removeGroup(e)}))},this.removeGroup=function(e){var t=this.groups.indexOf(e);-1!==t&&this.groups.splice(t,1)}}]).directive("uibAccordion",(function(){return{controller:"UibAccordionController",controllerAs:"accordion",transclude:!0,templateUrl:function(e,t){return t.templateUrl||"uib/template/accordion/accordion.html"}}})).directive("uibAccordionGroup",(function(){return{require:"^uibAccordion",transclude:!0,restrict:"A",templateUrl:function(e,t){return t.templateUrl||"uib/template/accordion/accordion-group.html"},scope:{heading:"@",panelClass:"@?",isOpen:"=?",isDisabled:"=?"},controller:function(){this.setHeading=function(e){this.heading=e}},link:function(e,t,n,a){t.addClass("panel"),a.addGroup(e),e.openClass=n.openClass||"panel-open",e.panelClass=n.panelClass||"panel-default",e.$watch("isOpen",(function(n){t.toggleClass(e.openClass,!!n),n&&a.closeOthers(e)})),e.toggleOpen=function(t){e.isDisabled||t&&32!==t.which||(e.isOpen=!e.isOpen)};var i="accordiongroup-"+e.$id+"-"+Math.floor(1e4*Math.random());e.headingId=i+"-tab",e.panelId=i+"-panel"}}})).directive("uibAccordionHeading",(function(){return{transclude:!0,template:"",replace:!0,require:"^uibAccordionGroup",link:function(e,t,n,a,i){a.setHeading(i(e,angular.noop))}}})).directive("uibAccordionTransclude",(function(){return{require:"^uibAccordionGroup",link:function(e,t,n,a){e.$watch((function(){return a[n.uibAccordionTransclude]}),(function(e){if(e){var n=angular.element(t[0].querySelector("uib-accordion-header,data-uib-accordion-header,x-uib-accordion-header,uib\\:accordion-header,[uib-accordion-header],[data-uib-accordion-header],[x-uib-accordion-header]"));n.html(""),n.append(e)}}))}}})),angular.module("ui.bootstrap.alert",[]).controller("UibAlertController",["$scope","$element","$attrs","$interpolate","$timeout",function(e,t,n,a,i){e.closeable=!!n.close,t.addClass("alert"),n.$set("role","alert"),e.closeable&&t.addClass("alert-dismissible");var o=angular.isDefined(n.dismissOnTimeout)?a(n.dismissOnTimeout)(e.$parent):null;o&&i((function(){e.close()}),parseInt(o,10))}]).directive("uibAlert",(function(){return{controller:"UibAlertController",controllerAs:"alert",restrict:"A",templateUrl:function(e,t){return t.templateUrl||"uib/template/alert/alert.html"},transclude:!0,scope:{close:"&"}}})),angular.module("ui.bootstrap.buttons",[]).constant("uibButtonConfig",{activeClass:"active",toggleEvent:"click"}).controller("UibButtonsController",["uibButtonConfig",function(e){this.activeClass=e.activeClass||"active",this.toggleEvent=e.toggleEvent||"click"}]).directive("uibBtnRadio",["$parse",function(e){return{require:["uibBtnRadio","ngModel"],controller:"UibButtonsController",controllerAs:"buttons",link:function(t,n,a,i){var o=i[0],r=i[1],l=e(a.uibUncheckable);n.find("input").css({display:"none"}),r.$render=function(){n.toggleClass(o.activeClass,angular.equals(r.$modelValue,t.$eval(a.uibBtnRadio)))},n.on(o.toggleEvent,(function(){if(!a.disabled){var e=n.hasClass(o.activeClass);e&&!angular.isDefined(a.uncheckable)||t.$apply((function(){r.$setViewValue(e?null:t.$eval(a.uibBtnRadio)),r.$render()}))}})),a.uibUncheckable&&t.$watch(l,(function(e){a.$set("uncheckable",e?"":void 0)}))}}}]).directive("uibBtnCheckbox",(function(){return{require:["uibBtnCheckbox","ngModel"],controller:"UibButtonsController",controllerAs:"button",link:function(e,t,n,a){var i=a[0],o=a[1];function r(){return l(n.btnCheckboxTrue,!0)}function l(t,n){return angular.isDefined(t)?e.$eval(t):n}t.find("input").css({display:"none"}),o.$render=function(){t.toggleClass(i.activeClass,angular.equals(o.$modelValue,r()))},t.on(i.toggleEvent,(function(){n.disabled||e.$apply((function(){o.$setViewValue(t.hasClass(i.activeClass)?l(n.btnCheckboxFalse,!1):r()),o.$render()}))}))}}})),angular.module("ui.bootstrap.carousel",[]).controller("UibCarouselController",["$scope","$element","$interval","$timeout","$animate",function(e,t,n,a,i){var o,r,l=this,s=l.slides=e.slides=[],u=e.active,p=[],c=!1;function d(){for(;p.length;)p.shift()}function m(e){for(var t=0;t<s.length;t++)s[t].slide.active=t===e}function f(e){for(var t=0;t<s.length;t++)if(s[t].slide===e)return t}function h(){o&&(n.cancel(o),o=null)}function g(){h();var t=+e.interval;!isNaN(t)&&t>0&&(o=n(b,t))}function b(){var t=+e.interval;r&&!isNaN(t)&&t>0&&s.length?e.next():e.pause()}t.addClass("carousel"),l.addSlide=function(t,n){s.push({slide:t,element:n}),s.sort((function(e,t){return+e.slide.index-+t.slide.index})),(t.index===e.active||1===s.length&&!angular.isNumber(e.active))&&(e.$currentTransition&&(e.$currentTransition=null),u=t.index,e.active=t.index,m(u),l.select(s[f(t)]),1===s.length&&e.play())},l.getCurrentIndex=function(){for(var e=0;e<s.length;e++)if(s[e].slide.index===u)return e},l.next=e.next=function(){var t=(l.getCurrentIndex()+1)%s.length;if(0!==t||!e.noWrap())return l.select(s[t],"next");e.pause()},l.prev=e.prev=function(){var t=l.getCurrentIndex()-1<0?s.length-1:l.getCurrentIndex()-1;if(!e.noWrap()||t!==s.length-1)return l.select(s[t],"prev");e.pause()},l.removeSlide=function(t){var n=f(t),a=p.indexOf(s[n]);-1!==a&&p.splice(a,1),s.splice(n,1),s.length>0&&u===n?n>=s.length?(u=s.length-1,e.active=u,m(u),l.select(s[s.length-1])):(u=n,e.active=u,m(u),l.select(s[n])):u>n&&(u--,e.active=u),0===s.length&&(u=null,e.active=null,d())},l.select=e.select=function(n,a){var o=f(n.slide);void 0===a&&(a=o>l.getCurrentIndex()?"next":"prev"),n.slide.index===u||e.$currentTransition?n&&n.slide.index!==u&&e.$currentTransition&&p.push(s[o]):function n(a,o,r){if(c)return;if(angular.extend(a,{direction:r}),angular.extend(s[u].slide||{},{direction:r}),i.enabled(t)&&!e.$currentTransition&&s[o].element&&l.slides.length>1){s[o].element.data("uib-slideDirection",a.direction);var f=l.getCurrentIndex();angular.isNumber(f)&&s[f].element&&s[f].element.data("uib-slideDirection",a.direction),e.$currentTransition=!0,i.on("addClass",s[o].element,(function(t,a){if("close"===a&&(e.$currentTransition=null,i.off("addClass",t),p.length)){var o=p.pop().slide,r=o.index,s=r>l.getCurrentIndex()?"next":"prev";d(),n(o,r,s)}}))}e.active=a.index,u=a.index,m(o),g()}(n.slide,o,a)},e.indexOfSlide=function(e){return+e.slide.index},e.isActive=function(t){return e.active===t.slide.index},e.isPrevDisabled=function(){return 0===e.active&&e.noWrap()},e.isNextDisabled=function(){return e.active===s.length-1&&e.noWrap()},e.pause=function(){e.noPause||(r=!1,h())},e.play=function(){r||(r=!0,g())},t.on("mouseenter",e.pause),t.on("mouseleave",e.play),e.$on("$destroy",(function(){c=!0,h()})),e.$watch("noTransition",(function(e){i.enabled(t,!e)})),e.$watch("interval",g),e.$watchCollection("slides",(function(t){t.length||(e.$currentTransition=null,d())})),e.$watch("active",(function(e){if(angular.isNumber(e)&&u!==e){for(var t=0;t<s.length;t++)if(s[t].slide.index===e){e=t;break}s[e]&&(m(e),l.select(s[e]),u=e)}}))}]).directive("uibCarousel",(function(){return{transclude:!0,controller:"UibCarouselController",controllerAs:"carousel",restrict:"A",templateUrl:function(e,t){return t.templateUrl||"uib/template/carousel/carousel.html"},scope:{active:"=",interval:"=",noTransition:"=",noPause:"=",noWrap:"&"}}})).directive("uibSlide",["$animate",function(e){return{require:"^uibCarousel",restrict:"A",transclude:!0,templateUrl:function(e,t){return t.templateUrl||"uib/template/carousel/slide.html"},scope:{actual:"=?",index:"=?"},link:function(t,n,a,i){n.addClass("item"),i.addSlide(t,n),t.$on("$destroy",(function(){i.removeSlide(t)})),t.$watch("active",(function(t){e[t?"addClass":"removeClass"](n,"active")}))}}}]).animation(".item",["$animateCss",function(e){function t(e,t,n){e.removeClass(t),n&&n()}return{beforeAddClass:function(n,a,i){if("active"===a){var o=n.data("uib-slideDirection"),r="next"===o?"left":"right",l=t.bind(this,n,r+" "+o,i);return n.addClass(o),e(n,{addClass:r}).start().done(l),function(){!0}}i()},beforeRemoveClass:function(n,a,i){if("active"===a){var o="next"===n.data("uib-slideDirection")?"left":"right",r=t.bind(this,n,o,i);return e(n,{addClass:o}).start().done(r),function(){!0}}i()}}}]),angular.module("ui.bootstrap.dateparser",[]).service("uibDateParser",["$log","$locale","dateFilter","orderByFilter",function(e,t,n,a){var i,o,r=/[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;function l(e,t,n){return function(){return e.substr(t+1,n-t-1)}}function s(e,t){for(var n=e.substr(t),a=0;a<o.length;a++)if(new RegExp("^"+o[a].key).test(n)){var i=o[a];return{endIdx:t+i.key.length,parser:i.formatter}}return{endIdx:t+1,parser:function(){return n.charAt(0)}}}function u(e){return parseInt(e,10)}function p(e,t){e=e.replace(/:/g,"");var n=Date.parse("Jan 01, 1970 00:00:00 "+e)/6e4;return isNaN(n)?t:n}function c(e,t){return(e=new Date(e.getTime())).setMinutes(e.getMinutes()+t),e}function d(e,t,n){n=n?-1:1;var a=e.getTimezoneOffset();return c(e,n*(p(t,a)-a))}this.init=function(){i=t.id,this.parsers={},this.formatters={},o=[{key:"yyyy",regex:"\\d{4}",apply:function(e){this.year=+e},formatter:function(e){var t=new Date;return t.setFullYear(Math.abs(e.getFullYear())),n(t,"yyyy")}},{key:"yy",regex:"\\d{2}",apply:function(e){e=+e,this.year=e<69?e+2e3:e+1900},formatter:function(e){var t=new Date;return t.setFullYear(Math.abs(e.getFullYear())),n(t,"yy")}},{key:"y",regex:"\\d{1,4}",apply:function(e){this.year=+e},formatter:function(e){var t=new Date;return t.setFullYear(Math.abs(e.getFullYear())),n(t,"y")}},{key:"M!",regex:"0?[1-9]|1[0-2]",apply:function(e){this.month=e-1},formatter:function(e){var t=e.getMonth();return/^[0-9]$/.test(t)?n(e,"MM"):n(e,"M")}},{key:"MMMM",regex:t.DATETIME_FORMATS.MONTH.join("|"),apply:function(e){this.month=t.DATETIME_FORMATS.MONTH.indexOf(e)},formatter:function(e){return n(e,"MMMM")}},{key:"MMM",regex:t.DATETIME_FORMATS.SHORTMONTH.join("|"),apply:function(e){this.month=t.DATETIME_FORMATS.SHORTMONTH.indexOf(e)},formatter:function(e){return n(e,"MMM")}},{key:"MM",regex:"0[1-9]|1[0-2]",apply:function(e){this.month=e-1},formatter:function(e){return n(e,"MM")}},{key:"M",regex:"[1-9]|1[0-2]",apply:function(e){this.month=e-1},formatter:function(e){return n(e,"M")}},{key:"d!",regex:"[0-2]?[0-9]{1}|3[0-1]{1}",apply:function(e){this.date=+e},formatter:function(e){var t=e.getDate();return/^[1-9]$/.test(t)?n(e,"dd"):n(e,"d")}},{key:"dd",regex:"[0-2][0-9]{1}|3[0-1]{1}",apply:function(e){this.date=+e},formatter:function(e){return n(e,"dd")}},{key:"d",regex:"[1-2]?[0-9]{1}|3[0-1]{1}",apply:function(e){this.date=+e},formatter:function(e){return n(e,"d")}},{key:"EEEE",regex:t.DATETIME_FORMATS.DAY.join("|"),formatter:function(e){return n(e,"EEEE")}},{key:"EEE",regex:t.DATETIME_FORMATS.SHORTDAY.join("|"),formatter:function(e){return n(e,"EEE")}},{key:"HH",regex:"(?:0|1)[0-9]|2[0-3]",apply:function(e){this.hours=+e},formatter:function(e){return n(e,"HH")}},{key:"hh",regex:"0[0-9]|1[0-2]",apply:function(e){this.hours=+e},formatter:function(e){return n(e,"hh")}},{key:"H",regex:"1?[0-9]|2[0-3]",apply:function(e){this.hours=+e},formatter:function(e){return n(e,"H")}},{key:"h",regex:"[0-9]|1[0-2]",apply:function(e){this.hours=+e},formatter:function(e){return n(e,"h")}},{key:"mm",regex:"[0-5][0-9]",apply:function(e){this.minutes=+e},formatter:function(e){return n(e,"mm")}},{key:"m",regex:"[0-9]|[1-5][0-9]",apply:function(e){this.minutes=+e},formatter:function(e){return n(e,"m")}},{key:"sss",regex:"[0-9][0-9][0-9]",apply:function(e){this.milliseconds=+e},formatter:function(e){return n(e,"sss")}},{key:"ss",regex:"[0-5][0-9]",apply:function(e){this.seconds=+e},formatter:function(e){return n(e,"ss")}},{key:"s",regex:"[0-9]|[1-5][0-9]",apply:function(e){this.seconds=+e},formatter:function(e){return n(e,"s")}},{key:"a",regex:t.DATETIME_FORMATS.AMPMS.join("|"),apply:function(e){12===this.hours&&(this.hours=0),"PM"===e&&(this.hours+=12)},formatter:function(e){return n(e,"a")}},{key:"Z",regex:"[+-]\\d{4}",apply:function(e){var t=e.match(/([+-])(\d{2})(\d{2})/),n=t[1],a=t[2],i=t[3];this.hours+=u(n+a),this.minutes+=u(n+i)},formatter:function(e){return n(e,"Z")}},{key:"ww",regex:"[0-4][0-9]|5[0-3]",formatter:function(e){return n(e,"ww")}},{key:"w",regex:"[0-9]|[1-4][0-9]|5[0-3]",formatter:function(e){return n(e,"w")}},{key:"GGGG",regex:t.DATETIME_FORMATS.ERANAMES.join("|").replace(/\s/g,"\\s"),formatter:function(e){return n(e,"GGGG")}},{key:"GGG",regex:t.DATETIME_FORMATS.ERAS.join("|"),formatter:function(e){return n(e,"GGG")}},{key:"GG",regex:t.DATETIME_FORMATS.ERAS.join("|"),formatter:function(e){return n(e,"GG")}},{key:"G",regex:t.DATETIME_FORMATS.ERAS.join("|"),formatter:function(e){return n(e,"G")}}]},this.init(),this.filter=function(e,n){return angular.isDate(e)&&!isNaN(e)&&n?(n=t.DATETIME_FORMATS[n]||n,t.id!==i&&this.init(),this.formatters[n]||(this.formatters[n]=function(e){for(var t,n,a=[],i=0;i<e.length;)if(angular.isNumber(n)){if("'"===e.charAt(i))(i+1>=e.length||"'"!==e.charAt(i+1))&&(a.push(l(e,n,i)),n=null);else if(i===e.length)for(;n<e.length;)t=s(e,n),a.push(t),n=t.endIdx;i++}else"'"!==e.charAt(i)?(t=s(e,i),a.push(t.parser),i=t.endIdx):(n=i,i++);return a}(n)),this.formatters[n].reduce((function(t,n){return t+n(e)}),"")):""},this.parse=function(n,l,s){if(!angular.isString(n)||!l)return n;l=(l=t.DATETIME_FORMATS[l]||l).replace(r,"\\$&"),t.id!==i&&this.init(),this.parsers[l]||(this.parsers[l]=function(e){var t=[],n=e.split(""),i=e.indexOf("'");if(i>-1){var r=!1;e=e.split("");for(var l=i;l<e.length;l++)r?("'"===e[l]&&(l+1<e.length&&"'"===e[l+1]?(e[l+1]="$",n[l+1]=""):(n[l]="",r=!1)),e[l]="$"):"'"===e[l]&&(e[l]="$",n[l]="",r=!0);e=e.join("")}return angular.forEach(o,(function(a){var i=e.indexOf(a.key);if(i>-1){e=e.split(""),n[i]="("+a.regex+")",e[i]="$";for(var o=i+1,r=i+a.key.length;o<r;o++)n[o]="",e[o]="$";e=e.join(""),t.push({index:i,key:a.key,apply:a.apply,matcher:a.regex})}})),{regex:new RegExp("^"+n.join("")+"$"),map:a(t,"index")}}(l));var u=this.parsers[l],p=u.regex,c=u.map,d=n.match(p),m=!1;if(d&&d.length){var f,h;angular.isDate(s)&&!isNaN(s.getTime())?f={year:s.getFullYear(),month:s.getMonth(),date:s.getDate(),hours:s.getHours(),minutes:s.getMinutes(),seconds:s.getSeconds(),milliseconds:s.getMilliseconds()}:(s&&e.warn("dateparser:","baseDate is not a valid date"),f={year:1900,month:0,date:1,hours:0,minutes:0,seconds:0,milliseconds:0});for(var g=1,b=d.length;g<b;g++){var v=c[g-1];"Z"===v.matcher&&(m=!0),v.apply&&v.apply.call(f,d[g])}var $=m?Date.prototype.setUTCFullYear:Date.prototype.setFullYear,y=m?Date.prototype.setUTCHours:Date.prototype.setHours;return function(e,t,n){if(n<1)return!1;if(1===t&&n>28)return 29===n&&(e%4==0&&e%100!=0||e%400==0);if(3===t||5===t||8===t||10===t)return n<31;return!0}(f.year,f.month,f.date)&&(!angular.isDate(s)||isNaN(s.getTime())||m?(h=new Date(0),$.call(h,f.year,f.month,f.date),y.call(h,f.hours||0,f.minutes||0,f.seconds||0,f.milliseconds||0)):(h=new Date(s),$.call(h,f.year,f.month,f.date),y.call(h,f.hours,f.minutes,f.seconds,f.milliseconds))),h}},this.toTimezone=function(e,t){return e&&t?d(e,t):e},this.fromTimezone=function(e,t){return e&&t?d(e,t,!0):e},this.timezoneToOffset=p,this.addDateMinutes=c,this.convertTimezoneToLocal=d}]),angular.module("ui.bootstrap.isClass",[]).directive("uibIsClass",["$animate",function(e){var t=/^\s*([\s\S]+?)\s+on\s+([\s\S]+?)\s*$/,n=/^\s*([\s\S]+?)\s+for\s+([\s\S]+?)\s*$/;return{restrict:"A",compile:function(a,i){var o=[],r=[],l={},s=i.uibIsClass.match(t),u=s[2],p=s[1].split(",");return function(t,a,i){o.push(t),r.push({scope:t,element:a}),p.forEach((function(a,i){!function(t,a){var i=t.match(n),o=a.$eval(i[1]),s=i[2],p=l[t];if(!p){var c=function(t){var n=null;r.some((function(e){if(e.scope.$eval(u)===t)return n=e,!0})),p.lastActivated!==n&&(p.lastActivated&&e.removeClass(p.lastActivated.element,o),n&&e.addClass(n.element,o),p.lastActivated=n)};l[t]=p={lastActivated:null,scope:a,watchFn:c,compareWithExp:s,watcher:a.$watch(s,c)}}p.watchFn(a.$eval(s))}(a,t)})),t.$on("$destroy",c)};function c(e){var t=e.targetScope,n=o.indexOf(t);if(o.splice(n,1),r.splice(n,1),o.length){var a=o[0];angular.forEach(l,(function(e){e.scope===t&&(e.watcher=a.$watch(e.compareWithExp,e.watchFn),e.scope=a)}))}else l={}}}}}]),angular.module("ui.bootstrap.datepicker",["ui.bootstrap.dateparser","ui.bootstrap.isClass"]).value("$datepickerSuppressError",!1).value("$datepickerLiteralWarning",!0).constant("uibDatepickerConfig",{datepickerMode:"day",formatDay:"dd",formatMonth:"MMMM",formatYear:"yyyy",formatDayHeader:"EEE",formatDayTitle:"MMMM yyyy",formatMonthTitle:"yyyy",maxDate:null,maxMode:"year",minDate:null,minMode:"day",monthColumns:3,ngModelOptions:{},shortcutPropagation:!1,showWeeks:!0,yearColumns:5,yearRows:4}).controller("UibDatepickerController",["$scope","$element","$attrs","$parse","$interpolate","$locale","$log","dateFilter","uibDatepickerConfig","$datepickerLiteralWarning","$datepickerSuppressError","uibDateParser",function(e,t,n,a,i,o,r,l,s,u,p,c){var d=this,m={$setViewValue:angular.noop},f={},h=[];t.addClass("uib-datepicker"),n.$set("role","application"),e.datepickerOptions||(e.datepickerOptions={}),this.modes=["day","month","year"],["customClass","dateDisabled","datepickerMode","formatDay","formatDayHeader","formatDayTitle","formatMonth","formatMonthTitle","formatYear","maxDate","maxMode","minDate","minMode","monthColumns","showWeeks","shortcutPropagation","startingDay","yearColumns","yearRows"].forEach((function(t){switch(t){case"customClass":case"dateDisabled":e[t]=e.datepickerOptions[t]||angular.noop;break;case"datepickerMode":e.datepickerMode=angular.isDefined(e.datepickerOptions.datepickerMode)?e.datepickerOptions.datepickerMode:s.datepickerMode;break;case"formatDay":case"formatDayHeader":case"formatDayTitle":case"formatMonth":case"formatMonthTitle":case"formatYear":d[t]=angular.isDefined(e.datepickerOptions[t])?i(e.datepickerOptions[t])(e.$parent):s[t];break;case"monthColumns":case"showWeeks":case"shortcutPropagation":case"yearColumns":case"yearRows":d[t]=angular.isDefined(e.datepickerOptions[t])?e.datepickerOptions[t]:s[t];break;case"startingDay":angular.isDefined(e.datepickerOptions.startingDay)?d.startingDay=e.datepickerOptions.startingDay:angular.isNumber(s.startingDay)?d.startingDay=s.startingDay:d.startingDay=(o.DATETIME_FORMATS.FIRSTDAYOFWEEK+8)%7;break;case"maxDate":case"minDate":e.$watch("datepickerOptions."+t,(function(e){e?angular.isDate(e)?d[t]=c.fromTimezone(new Date(e),f.timezone):(u&&r.warn("Literal date support has been deprecated, please switch to date object usage"),d[t]=new Date(l(e,"medium"))):d[t]=s[t]?c.fromTimezone(new Date(s[t]),f.timezone):null,d.refreshView()}));break;case"maxMode":case"minMode":e.datepickerOptions[t]?e.$watch((function(){return e.datepickerOptions[t]}),(function(n){d[t]=e[t]=angular.isDefined(n)?n:e.datepickerOptions[t],("minMode"===t&&d.modes.indexOf(e.datepickerOptions.datepickerMode)<d.modes.indexOf(d[t])||"maxMode"===t&&d.modes.indexOf(e.datepickerOptions.datepickerMode)>d.modes.indexOf(d[t]))&&(e.datepickerMode=d[t],e.datepickerOptions.datepickerMode=d[t])})):d[t]=e[t]=s[t]||null}})),e.uniqueId="datepicker-"+e.$id+"-"+Math.floor(1e4*Math.random()),e.disabled=angular.isDefined(n.disabled)||!1,angular.isDefined(n.ngDisabled)&&h.push(e.$parent.$watch(n.ngDisabled,(function(t){e.disabled=t,d.refreshView()}))),e.isActive=function(t){return 0===d.compare(t.date,d.activeDate)&&(e.activeDateId=t.uid,!0)},this.init=function(t){m=t,f=t.$options||e.datepickerOptions.ngModelOptions||s.ngModelOptions,e.datepickerOptions.initDate?(d.activeDate=c.fromTimezone(e.datepickerOptions.initDate,f.timezone)||new Date,e.$watch("datepickerOptions.initDate",(function(e){e&&(m.$isEmpty(m.$modelValue)||m.$invalid)&&(d.activeDate=c.fromTimezone(e,f.timezone),d.refreshView())}))):d.activeDate=new Date;var n=m.$modelValue?new Date(m.$modelValue):new Date;this.activeDate=isNaN(n)?c.fromTimezone(new Date,f.timezone):c.fromTimezone(n,f.timezone),m.$render=function(){d.render()}},this.render=function(){if(m.$viewValue){var e=new Date(m.$viewValue);!isNaN(e)?this.activeDate=c.fromTimezone(e,f.timezone):p||r.error('Datepicker directive: "ng-model" value must be a Date object')}this.refreshView()},this.refreshView=function(){if(this.element){e.selectedDt=null,this._refreshView(),e.activeDt&&(e.activeDateId=e.activeDt.uid);var t=m.$viewValue?new Date(m.$viewValue):null;t=c.fromTimezone(t,f.timezone),m.$setValidity("dateDisabled",!t||this.element&&!this.isDisabled(t))}},this.createDateObject=function(t,n){var a=m.$viewValue?new Date(m.$viewValue):null;a=c.fromTimezone(a,f.timezone);var i=new Date;i=c.fromTimezone(i,f.timezone);var o=this.compare(t,i),r={date:t,label:c.filter(t,n),selected:a&&0===this.compare(t,a),disabled:this.isDisabled(t),past:o<0,current:0===o,future:o>0,customClass:this.customClass(t)||null};return a&&0===this.compare(t,a)&&(e.selectedDt=r),d.activeDate&&0===this.compare(r.date,d.activeDate)&&(e.activeDt=r),r},this.isDisabled=function(t){return e.disabled||this.minDate&&this.compare(t,this.minDate)<0||this.maxDate&&this.compare(t,this.maxDate)>0||e.dateDisabled&&e.dateDisabled({date:t,mode:e.datepickerMode})},this.customClass=function(t){return e.customClass({date:t,mode:e.datepickerMode})},this.split=function(e,t){for(var n=[];e.length>0;)n.push(e.splice(0,t));return n},e.select=function(t){if(e.datepickerMode===d.minMode){var n=m.$viewValue?c.fromTimezone(new Date(m.$viewValue),f.timezone):new Date(0,0,0,0,0,0,0);n.setFullYear(t.getFullYear(),t.getMonth(),t.getDate()),n=c.toTimezone(n,f.timezone),m.$setViewValue(n),m.$render()}else d.activeDate=t,g(d.modes[d.modes.indexOf(e.datepickerMode)-1]),e.$emit("uib:datepicker.mode");e.$broadcast("uib:datepicker.focus")},e.move=function(e){var t=d.activeDate.getFullYear()+e*(d.step.years||0),n=d.activeDate.getMonth()+e*(d.step.months||0);d.activeDate.setFullYear(t,n,1),d.refreshView()},e.toggleMode=function(t){t=t||1,e.datepickerMode===d.maxMode&&1===t||e.datepickerMode===d.minMode&&-1===t||(g(d.modes[d.modes.indexOf(e.datepickerMode)+t]),e.$emit("uib:datepicker.mode"))},e.keys={13:"enter",32:"space",33:"pageup",34:"pagedown",35:"end",36:"home",37:"left",38:"up",39:"right",40:"down"};function g(t){e.datepickerMode=t,e.datepickerOptions.datepickerMode=t}e.$on("uib:datepicker.focus",(function(){d.element[0].focus()})),e.keydown=function(t){var n=e.keys[t.which];if(n&&!t.shiftKey&&!t.altKey&&!e.disabled)if(t.preventDefault(),d.shortcutPropagation||t.stopPropagation(),"enter"===n||"space"===n){if(d.isDisabled(d.activeDate))return;e.select(d.activeDate)}else!t.ctrlKey||"up"!==n&&"down"!==n?(d.handleKeyDown(n,t),d.refreshView()):e.toggleMode("up"===n?1:-1)},t.on("keydown",(function(t){e.$apply((function(){e.keydown(t)}))})),e.$on("$destroy",(function(){for(;h.length;)h.shift()()}))}]).controller("UibDaypickerController",["$scope","$element","dateFilter",function(e,t,n){var a=[31,28,31,30,31,30,31,31,30,31,30,31];function i(e,t){return 1!==t||e%4!=0||e%100==0&&e%400!=0?a[t]:29}function o(e){var t=new Date(e);t.setDate(t.getDate()+4-(t.getDay()||7));var n=t.getTime();return t.setMonth(0),t.setDate(1),Math.floor(Math.round((n-t)/864e5)/7)+1}this.step={months:1},this.element=t,this.init=function(t){angular.extend(t,this),e.showWeeks=t.showWeeks,t.refreshView()},this.getDates=function(e,t){for(var n,a=new Array(t),i=new Date(e),o=0;o<t;)n=new Date(i),a[o++]=n,i.setDate(i.getDate()+1);return a},this._refreshView=function(){var t=this.activeDate.getFullYear(),a=this.activeDate.getMonth(),i=new Date(this.activeDate);i.setFullYear(t,a,1);var r=this.startingDay-i.getDay(),l=r>0?7-r:-r,s=new Date(i);l>0&&s.setDate(1-l);for(var u=this.getDates(s,42),p=0;p<42;p++)u[p]=angular.extend(this.createDateObject(u[p],this.formatDay),{secondary:u[p].getMonth()!==a,uid:e.uniqueId+"-"+p});e.labels=new Array(7);for(var c=0;c<7;c++)e.labels[c]={abbr:n(u[c].date,this.formatDayHeader),full:n(u[c].date,"EEEE")};if(e.title=n(this.activeDate,this.formatDayTitle),e.rows=this.split(u,7),e.showWeeks){e.weekNumbers=[];for(var d=(11-this.startingDay)%7,m=e.rows.length,f=0;f<m;f++)e.weekNumbers.push(o(e.rows[f][d].date))}},this.compare=function(e,t){var n=new Date(e.getFullYear(),e.getMonth(),e.getDate()),a=new Date(t.getFullYear(),t.getMonth(),t.getDate());return n.setFullYear(e.getFullYear()),a.setFullYear(t.getFullYear()),n-a},this.handleKeyDown=function(e,t){var n=this.activeDate.getDate();if("left"===e)n-=1;else if("up"===e)n-=7;else if("right"===e)n+=1;else if("down"===e)n+=7;else if("pageup"===e||"pagedown"===e){var a=this.activeDate.getMonth()+("pageup"===e?-1:1);this.activeDate.setMonth(a,1),n=Math.min(i(this.activeDate.getFullYear(),this.activeDate.getMonth()),n)}else"home"===e?n=1:"end"===e&&(n=i(this.activeDate.getFullYear(),this.activeDate.getMonth()));this.activeDate.setDate(n)}}]).controller("UibMonthpickerController",["$scope","$element","dateFilter",function(e,t,n){this.step={years:1},this.element=t,this.init=function(e){angular.extend(e,this),e.refreshView()},this._refreshView=function(){for(var t,a=new Array(12),i=this.activeDate.getFullYear(),o=0;o<12;o++)(t=new Date(this.activeDate)).setFullYear(i,o,1),a[o]=angular.extend(this.createDateObject(t,this.formatMonth),{uid:e.uniqueId+"-"+o});e.title=n(this.activeDate,this.formatMonthTitle),e.rows=this.split(a,this.monthColumns),e.yearHeaderColspan=this.monthColumns>3?this.monthColumns-2:1},this.compare=function(e,t){var n=new Date(e.getFullYear(),e.getMonth()),a=new Date(t.getFullYear(),t.getMonth());return n.setFullYear(e.getFullYear()),a.setFullYear(t.getFullYear()),n-a},this.handleKeyDown=function(e,t){var n=this.activeDate.getMonth();if("left"===e)n-=1;else if("up"===e)n-=this.monthColumns;else if("right"===e)n+=1;else if("down"===e)n+=this.monthColumns;else if("pageup"===e||"pagedown"===e){var a=this.activeDate.getFullYear()+("pageup"===e?-1:1);this.activeDate.setFullYear(a)}else"home"===e?n=0:"end"===e&&(n=11);this.activeDate.setMonth(n)}}]).controller("UibYearpickerController",["$scope","$element","dateFilter",function(e,t,n){var a,i;function o(e){return parseInt((e-1)/i,10)*i+1}this.element=t,this.yearpickerInit=function(){a=this.yearColumns,i=this.yearRows*a,this.step={years:i}},this._refreshView=function(){for(var t,n=new Array(i),r=0,l=o(this.activeDate.getFullYear());r<i;r++)(t=new Date(this.activeDate)).setFullYear(l+r,0,1),n[r]=angular.extend(this.createDateObject(t,this.formatYear),{uid:e.uniqueId+"-"+r});e.title=[n[0].label,n[i-1].label].join(" - "),e.rows=this.split(n,a),e.columns=a},this.compare=function(e,t){return e.getFullYear()-t.getFullYear()},this.handleKeyDown=function(e,t){var n=this.activeDate.getFullYear();"left"===e?n-=1:"up"===e?n-=a:"right"===e?n+=1:"down"===e?n+=a:"pageup"===e||"pagedown"===e?n+=("pageup"===e?-1:1)*i:"home"===e?n=o(this.activeDate.getFullYear()):"end"===e&&(n=o(this.activeDate.getFullYear())+i-1),this.activeDate.setFullYear(n)}}]).directive("uibDatepicker",(function(){return{templateUrl:function(e,t){return t.templateUrl||"uib/template/datepicker/datepicker.html"},scope:{datepickerOptions:"=?"},require:["uibDatepicker","^ngModel"],restrict:"A",controller:"UibDatepickerController",controllerAs:"datepicker",link:function(e,t,n,a){var i=a[0],o=a[1];i.init(o)}}})).directive("uibDaypicker",(function(){return{templateUrl:function(e,t){return t.templateUrl||"uib/template/datepicker/day.html"},require:["^uibDatepicker","uibDaypicker"],restrict:"A",controller:"UibDaypickerController",link:function(e,t,n,a){var i=a[0];a[1].init(i)}}})).directive("uibMonthpicker",(function(){return{templateUrl:function(e,t){return t.templateUrl||"uib/template/datepicker/month.html"},require:["^uibDatepicker","uibMonthpicker"],restrict:"A",controller:"UibMonthpickerController",link:function(e,t,n,a){var i=a[0];a[1].init(i)}}})).directive("uibYearpicker",(function(){return{templateUrl:function(e,t){return t.templateUrl||"uib/template/datepicker/year.html"},require:["^uibDatepicker","uibYearpicker"],restrict:"A",controller:"UibYearpickerController",link:function(e,t,n,a){var i=a[0];angular.extend(i,a[1]),i.yearpickerInit(),i.refreshView()}}})),angular.module("ui.bootstrap.position",[]).factory("$uibPosition",["$document","$window",function(e,t){var n,a,i={normal:/(auto|scroll)/,hidden:/(auto|scroll|hidden)/},o={auto:/\s?auto?\s?/i,primary:/^(top|bottom|left|right)$/,secondary:/^(top|bottom|left|right|center)$/,vertical:/^(top|bottom)$/},r=/(HTML|BODY)/;return{getRawNode:function(e){return e.nodeName?e:e[0]||e},parseStyle:function(e){return e=parseFloat(e),isFinite(e)?e:0},offsetParent:function(n){var a,i=(n=this.getRawNode(n)).offsetParent||e[0].documentElement;for(;i&&i!==e[0].documentElement&&(a=i,"static"===(t.getComputedStyle(a).position||"static"));)i=i.offsetParent;return i||e[0].documentElement},scrollbarWidth:function(i){if(i){if(angular.isUndefined(a)){var o=e.find("body");o.addClass("uib-position-body-scrollbar-measure"),a=t.innerWidth-o[0].clientWidth,a=isFinite(a)?a:0,o.removeClass("uib-position-body-scrollbar-measure")}return a}if(angular.isUndefined(n)){var r=angular.element('<div class="uib-position-scrollbar-measure"></div>');e.find("body").append(r),n=r[0].offsetWidth-r[0].clientWidth,n=isFinite(n)?n:0,r.remove()}return n},scrollbarPadding:function(e){e=this.getRawNode(e);var n=t.getComputedStyle(e),a=this.parseStyle(n.paddingRight),i=this.parseStyle(n.paddingBottom),o=this.scrollParent(e,!1,!0),l=this.scrollbarWidth(o,r.test(o.tagName));return{scrollbarWidth:l,widthOverflow:o.scrollWidth>o.clientWidth,right:a+l,originalRight:a,heightOverflow:o.scrollHeight>o.clientHeight,bottom:i+l,originalBottom:i}},isScrollable:function(e,n){e=this.getRawNode(e);var a=n?i.hidden:i.normal,o=t.getComputedStyle(e);return a.test(o.overflow+o.overflowY+o.overflowX)},scrollParent:function(n,a,o){n=this.getRawNode(n);var r=a?i.hidden:i.normal,l=e[0].documentElement,s=t.getComputedStyle(n);if(o&&r.test(s.overflow+s.overflowY+s.overflowX))return n;var u="absolute"===s.position,p=n.parentElement||l;if(p===l||"fixed"===s.position)return l;for(;p.parentElement&&p!==l;){var c=t.getComputedStyle(p);if(u&&"static"!==c.position&&(u=!1),!u&&r.test(c.overflow+c.overflowY+c.overflowX))break;p=p.parentElement}return p},position:function(n,a){n=this.getRawNode(n);var i=this.offset(n);if(a){var o=t.getComputedStyle(n);i.top-=this.parseStyle(o.marginTop),i.left-=this.parseStyle(o.marginLeft)}var r=this.offsetParent(n),l={top:0,left:0};return r!==e[0].documentElement&&((l=this.offset(r)).top+=r.clientTop-r.scrollTop,l.left+=r.clientLeft-r.scrollLeft),{width:Math.round(angular.isNumber(i.width)?i.width:n.offsetWidth),height:Math.round(angular.isNumber(i.height)?i.height:n.offsetHeight),top:Math.round(i.top-l.top),left:Math.round(i.left-l.left)}},offset:function(n){var a=(n=this.getRawNode(n)).getBoundingClientRect();return{width:Math.round(angular.isNumber(a.width)?a.width:n.offsetWidth),height:Math.round(angular.isNumber(a.height)?a.height:n.offsetHeight),top:Math.round(a.top+(t.pageYOffset||e[0].documentElement.scrollTop)),left:Math.round(a.left+(t.pageXOffset||e[0].documentElement.scrollLeft))}},viewportOffset:function(n,a,i){i=!1!==i;var o=(n=this.getRawNode(n)).getBoundingClientRect(),r={top:0,left:0,bottom:0,right:0},l=a?e[0].documentElement:this.scrollParent(n),s=l.getBoundingClientRect();if(r.top=s.top+l.clientTop,r.left=s.left+l.clientLeft,l===e[0].documentElement&&(r.top+=t.pageYOffset,r.left+=t.pageXOffset),r.bottom=r.top+l.clientHeight,r.right=r.left+l.clientWidth,i){var u=t.getComputedStyle(l);r.top+=this.parseStyle(u.paddingTop),r.bottom-=this.parseStyle(u.paddingBottom),r.left+=this.parseStyle(u.paddingLeft),r.right-=this.parseStyle(u.paddingRight)}return{top:Math.round(o.top-r.top),bottom:Math.round(r.bottom-o.bottom),left:Math.round(o.left-r.left),right:Math.round(r.right-o.right)}},parsePlacement:function(e){var t=o.auto.test(e);return t&&(e=e.replace(o.auto,"")),(e=e.split("-"))[0]=e[0]||"top",o.primary.test(e[0])||(e[0]="top"),e[1]=e[1]||"center",o.secondary.test(e[1])||(e[1]="center"),e[2]=!!t,e},positionElements:function(e,n,a,i){e=this.getRawNode(e),n=this.getRawNode(n);var r=angular.isDefined(n.offsetWidth)?n.offsetWidth:n.prop("offsetWidth"),l=angular.isDefined(n.offsetHeight)?n.offsetHeight:n.prop("offsetHeight");a=this.parsePlacement(a);var s=i?this.offset(e):this.position(e),u={top:0,left:0,placement:""};if(a[2]){var p=this.viewportOffset(e,i),c=t.getComputedStyle(n),d={width:r+Math.round(Math.abs(this.parseStyle(c.marginLeft)+this.parseStyle(c.marginRight))),height:l+Math.round(Math.abs(this.parseStyle(c.marginTop)+this.parseStyle(c.marginBottom)))};if(a[0]="top"===a[0]&&d.height>p.top&&d.height<=p.bottom?"bottom":"bottom"===a[0]&&d.height>p.bottom&&d.height<=p.top?"top":"left"===a[0]&&d.width>p.left&&d.width<=p.right?"right":"right"===a[0]&&d.width>p.right&&d.width<=p.left?"left":a[0],a[1]="top"===a[1]&&d.height-s.height>p.bottom&&d.height-s.height<=p.top?"bottom":"bottom"===a[1]&&d.height-s.height>p.top&&d.height-s.height<=p.bottom?"top":"left"===a[1]&&d.width-s.width>p.right&&d.width-s.width<=p.left?"right":"right"===a[1]&&d.width-s.width>p.left&&d.width-s.width<=p.right?"left":a[1],"center"===a[1])if(o.vertical.test(a[0])){var m=s.width/2-r/2;p.left+m<0&&d.width-s.width<=p.right?a[1]="left":p.right+m<0&&d.width-s.width<=p.left&&(a[1]="right")}else{var f=s.height/2-d.height/2;p.top+f<0&&d.height-s.height<=p.bottom?a[1]="top":p.bottom+f<0&&d.height-s.height<=p.top&&(a[1]="bottom")}}switch(a[0]){case"top":u.top=s.top-l;break;case"bottom":u.top=s.top+s.height;break;case"left":u.left=s.left-r;break;case"right":u.left=s.left+s.width}switch(a[1]){case"top":u.top=s.top;break;case"bottom":u.top=s.top+s.height-l;break;case"left":u.left=s.left;break;case"right":u.left=s.left+s.width-r;break;case"center":o.vertical.test(a[0])?u.left=s.left+s.width/2-r/2:u.top=s.top+s.height/2-l/2}return u.top=Math.round(u.top),u.left=Math.round(u.left),u.placement="center"===a[1]?a[0]:a[0]+"-"+a[1],u},adjustTop:function(e,t,n,a){if(-1!==e.indexOf("top")&&n!==a)return{top:t.top-a+"px"}},positionArrow:function(e,n){var a=(e=this.getRawNode(e)).querySelector(".tooltip-inner, .popover-inner");if(a){var i=angular.element(a).hasClass("tooltip-inner"),r=i?e.querySelector(".tooltip-arrow"):e.querySelector(".arrow");if(r){var l={top:"",bottom:"",left:"",right:""};if("center"!==(n=this.parsePlacement(n))[1]){var s="border-"+n[0]+"-width",u=t.getComputedStyle(r)[s],p="border-";o.vertical.test(n[0])?p+=n[0]+"-"+n[1]:p+=n[1]+"-"+n[0],p+="-radius";var c=t.getComputedStyle(i?a:e)[p];switch(n[0]){case"top":l.bottom=i?"0":"-"+u;break;case"bottom":l.top=i?"0":"-"+u;break;case"left":l.right=i?"0":"-"+u;break;case"right":l.left=i?"0":"-"+u}l[n[1]]=c,angular.element(r).css(l)}else angular.element(r).css(l)}}}}}]),angular.module("ui.bootstrap.datepickerPopup",["ui.bootstrap.datepicker","ui.bootstrap.position"]).value("$datepickerPopupLiteralWarning",!0).constant("uibDatepickerPopupConfig",{altInputFormats:[],appendToBody:!1,clearText:"Clear",closeOnDateSelection:!0,closeText:"Done",currentText:"Today",datepickerPopup:"yyyy-MM-dd",datepickerPopupTemplateUrl:"uib/template/datepickerPopup/popup.html",datepickerTemplateUrl:"uib/template/datepicker/datepicker.html",html5Types:{date:"yyyy-MM-dd","datetime-local":"yyyy-MM-ddTHH:mm:ss.sss",month:"yyyy-MM"},onOpenFocus:!0,showButtonBar:!0,placement:"auto bottom-left"}).controller("UibDatepickerPopupController",["$scope","$element","$attrs","$compile","$log","$parse","$window","$document","$rootScope","$uibPosition","dateFilter","uibDateParser","uibDatepickerPopupConfig","$timeout","uibDatepickerConfig","$datepickerPopupLiteralWarning",function(e,t,n,a,i,o,r,l,s,u,p,c,d,m,f,h){var g,b,v,$,y,w,k,D,x,C,T,M,O,P=!1,S=[];function E(t){var n=c.parse(t,g,e.date);if(isNaN(n))for(var a=0;a<O.length;a++)if(n=c.parse(t,O[a],e.date),!isNaN(n))return n;return n}function I(e){if(angular.isNumber(e)&&(e=new Date(e)),!e)return null;if(angular.isDate(e)&&!isNaN(e))return e;if(angular.isString(e)){var t=E(e);if(!isNaN(t))return c.fromTimezone(t,T.timezone)}return C.$options&&C.$options.allowInvalid?e:void 0}function A(e,t){var a=e||t;return!n.ngRequired&&!a||(angular.isNumber(a)&&(a=new Date(a)),!a||(!(!angular.isDate(a)||isNaN(a))||!!angular.isString(a)&&!isNaN(E(a))))}function U(n){if(e.isOpen||!e.disabled){var a=M[0],i=t[0].contains(n.target),o=void 0!==a.contains&&a.contains(n.target);!e.isOpen||i||o||e.$apply((function(){e.isOpen=!1}))}}function N(n){27===n.which&&e.isOpen?(n.preventDefault(),n.stopPropagation(),e.$apply((function(){e.isOpen=!1})),t[0].focus()):40!==n.which||e.isOpen||(n.preventDefault(),n.stopPropagation(),e.$apply((function(){e.isOpen=!0})))}function F(){if(e.isOpen){var a=angular.element(M[0].querySelector(".uib-datepicker-popup")),i=n.popupPlacement?n.popupPlacement:d.placement,o=u.positionElements(t,a,i,v);a.css({top:o.top+"px",left:o.left+"px"}),a.hasClass("uib-position-measure")&&a.removeClass("uib-position-measure")}}this.init=function(i){if(C=i,T=angular.isObject(i.$options)?i.$options:{timezone:null},b=angular.isDefined(n.closeOnDateSelection)?e.$parent.$eval(n.closeOnDateSelection):d.closeOnDateSelection,v=angular.isDefined(n.datepickerAppendToBody)?e.$parent.$eval(n.datepickerAppendToBody):d.appendToBody,$=angular.isDefined(n.onOpenFocus)?e.$parent.$eval(n.onOpenFocus):d.onOpenFocus,y=angular.isDefined(n.datepickerPopupTemplateUrl)?n.datepickerPopupTemplateUrl:d.datepickerPopupTemplateUrl,w=angular.isDefined(n.datepickerTemplateUrl)?n.datepickerTemplateUrl:d.datepickerTemplateUrl,O=angular.isDefined(n.altInputFormats)?e.$parent.$eval(n.altInputFormats):d.altInputFormats,e.showButtonBar=angular.isDefined(n.showButtonBar)?e.$parent.$eval(n.showButtonBar):d.showButtonBar,d.html5Types[n.type]?(g=d.html5Types[n.type],P=!0):(g=n.uibDatepickerPopup||d.datepickerPopup,n.$observe("uibDatepickerPopup",(function(e,t){var n=e||d.datepickerPopup;if(n!==g&&(g=n,C.$modelValue=null,!g))throw new Error("uibDatepickerPopup must have a date format specified.")}))),!g)throw new Error("uibDatepickerPopup must have a date format specified.");if(P&&n.uibDatepickerPopup)throw new Error("HTML5 date input types do not support custom formats.");(k=angular.element("<div uib-datepicker-popup-wrap><div uib-datepicker></div></div>")).attr({"ng-model":"date","ng-change":"dateSelection(date)","template-url":y}),(D=angular.element(k.children()[0])).attr("template-url",w),e.datepickerOptions||(e.datepickerOptions={}),P&&"month"===n.type&&(e.datepickerOptions.datepickerMode="month",e.datepickerOptions.minMode="month"),D.attr("datepicker-options","datepickerOptions"),P?C.$formatters.push((function(t){return e.date=c.fromTimezone(t,T.timezone),t})):(C.$$parserName="date",C.$validators.date=A,C.$parsers.unshift(I),C.$formatters.push((function(t){return C.$isEmpty(t)?(e.date=t,t):(angular.isNumber(t)&&(t=new Date(t)),e.date=c.fromTimezone(t,T.timezone),c.filter(e.date,g))}))),C.$viewChangeListeners.push((function(){e.date=E(C.$viewValue)})),t.on("keydown",N),M=a(k)(e),k.remove(),v?l.find("body").append(M):t.after(M),e.$on("$destroy",(function(){for(!0===e.isOpen&&(s.$$phase||e.$apply((function(){e.isOpen=!1}))),M.remove(),t.off("keydown",N),l.off("click",U),x&&x.off("scroll",F),angular.element(r).off("resize",F);S.length;)S.shift()()}))},e.getText=function(t){return e[t+"Text"]||d[t+"Text"]},e.isDisabled=function(t){"today"===t&&(t=c.fromTimezone(new Date,T.timezone));var n={};return angular.forEach(["minDate","maxDate"],(function(t){e.datepickerOptions[t]?angular.isDate(e.datepickerOptions[t])?n[t]=new Date(e.datepickerOptions[t]):(h&&i.warn("Literal date support has been deprecated, please switch to date object usage"),n[t]=new Date(p(e.datepickerOptions[t],"medium"))):n[t]=null})),e.datepickerOptions&&n.minDate&&e.compare(t,n.minDate)<0||n.maxDate&&e.compare(t,n.maxDate)>0},e.compare=function(e,t){return new Date(e.getFullYear(),e.getMonth(),e.getDate())-new Date(t.getFullYear(),t.getMonth(),t.getDate())},e.dateSelection=function(n){e.date=n;var a=e.date?c.filter(e.date,g):null;t.val(a),C.$setViewValue(a),b&&(e.isOpen=!1,t[0].focus())},e.keydown=function(n){27===n.which&&(n.stopPropagation(),e.isOpen=!1,t[0].focus())},e.select=function(t,n){if(n.stopPropagation(),"today"===t){var a=new Date;angular.isDate(e.date)?(t=new Date(e.date)).setFullYear(a.getFullYear(),a.getMonth(),a.getDate()):(t=c.fromTimezone(a,T.timezone)).setHours(0,0,0,0)}e.dateSelection(t)},e.close=function(n){n.stopPropagation(),e.isOpen=!1,t[0].focus()},e.disabled=angular.isDefined(n.disabled)||!1,n.ngDisabled&&S.push(e.$parent.$watch(o(n.ngDisabled),(function(t){e.disabled=t}))),e.$watch("isOpen",(function(a){a?e.disabled?e.isOpen=!1:m((function(){F(),$&&e.$broadcast("uib:datepicker.focus"),l.on("click",U);var a=n.popupPlacement?n.popupPlacement:d.placement;v||u.parsePlacement(a)[2]?(x=x||angular.element(u.scrollParent(t)))&&x.on("scroll",F):x=null,angular.element(r).on("resize",F)}),0,!1):(l.off("click",U),x&&x.off("scroll",F),angular.element(r).off("resize",F))})),e.$on("uib:datepicker.mode",(function(){m(F,0,!1)}))}]).directive("uibDatepickerPopup",(function(){return{require:["ngModel","uibDatepickerPopup"],controller:"UibDatepickerPopupController",scope:{datepickerOptions:"=?",isOpen:"=?",currentText:"@",clearText:"@",closeText:"@"},link:function(e,t,n,a){var i=a[0];a[1].init(i)}}})).directive("uibDatepickerPopupWrap",(function(){return{restrict:"A",transclude:!0,templateUrl:function(e,t){return t.templateUrl||"uib/template/datepickerPopup/popup.html"}}})),angular.module("ui.bootstrap.debounce",[]).factory("$$debounce",["$timeout",function(e){return function(t,n){var a;return function(){var i=this,o=Array.prototype.slice.call(arguments);a&&e.cancel(a),a=e((function(){t.apply(i,o)}),n)}}}]),angular.module("ui.bootstrap.dropdown",["ui.bootstrap.position"]).constant("uibDropdownConfig",{appendToOpenClass:"uib-dropdown-open",openClass:"open"}).service("uibDropdownService",["$document","$rootScope",function(e,t){var n=null;this.open=function(t,i){n||e.on("click",a),n&&n!==t&&(n.isOpen=!1),n=t},this.close=function(t,i){n===t&&(n=null,e.off("click",a),e.off("keydown",this.keybindFilter))};var a=function(e){if(n&&!(e&&"disabled"===n.getAutoClose()||e&&3===e.which)){var a=n.getToggleElement();if(!(e&&a&&a[0].contains(e.target))){var i=n.getDropdownElement();e&&"outsideClick"===n.getAutoClose()&&i&&i[0].contains(e.target)||(n.focusToggleElement(),n.isOpen=!1,t.$$phase||n.$apply())}}};this.keybindFilter=function(e){var t=n.getDropdownElement(),i=n.getToggleElement(),o=t&&t[0].contains(e.target),r=i&&i[0].contains(e.target);27===e.which?(e.stopPropagation(),n.focusToggleElement(),a()):n.isKeynavEnabled()&&-1!==[38,40].indexOf(e.which)&&n.isOpen&&(o||r)&&(e.preventDefault(),e.stopPropagation(),n.focusDropdownEntry(e.which))}}]).controller("UibDropdownController",["$scope","$element","$attrs","$parse","uibDropdownConfig","uibDropdownService","$animate","$uibPosition","$document","$compile","$templateRequest",function(e,t,n,a,i,o,r,l,s,u,p){var c,d,m=this,f=e.$new(),h=i.appendToOpenClass,g=i.openClass,b=angular.noop,v=n.onToggle?a(n.onToggle):angular.noop,$=!1,y=null,w=!1,k=s.find("body");t.addClass("dropdown"),this.init=function(){if(n.isOpen&&(d=a(n.isOpen),b=d.assign,e.$watch(d,(function(e){f.isOpen=!!e}))),angular.isDefined(n.dropdownAppendTo)){var i=a(n.dropdownAppendTo)(f);i&&(y=angular.element(i))}$=angular.isDefined(n.dropdownAppendToBody),w=angular.isDefined(n.keyboardNav),$&&!y&&(y=k),y&&m.dropdownMenu&&(y.append(m.dropdownMenu),t.on("$destroy",(function(){m.dropdownMenu.remove()})))},this.toggle=function(e){return f.isOpen=arguments.length?!!e:!f.isOpen,angular.isFunction(b)&&b(f,f.isOpen),f.isOpen},this.isOpen=function(){return f.isOpen},f.getToggleElement=function(){return m.toggleElement},f.getAutoClose=function(){return n.autoClose||"always"},f.getElement=function(){return t},f.isKeynavEnabled=function(){return w},f.focusDropdownEntry=function(e){var n=m.dropdownMenu?angular.element(m.dropdownMenu).find("a"):t.find("ul").eq(0).find("a");switch(e){case 40:angular.isNumber(m.selectedOption)?m.selectedOption=m.selectedOption===n.length-1?m.selectedOption:m.selectedOption+1:m.selectedOption=0;break;case 38:angular.isNumber(m.selectedOption)?m.selectedOption=0===m.selectedOption?0:m.selectedOption-1:m.selectedOption=n.length-1}n[m.selectedOption].focus()},f.getDropdownElement=function(){return m.dropdownMenu},f.focusToggleElement=function(){m.toggleElement&&m.toggleElement[0].focus()},f.$watch("isOpen",(function(n,a){if(y&&m.dropdownMenu){var i,d,w,k=l.positionElements(t,m.dropdownMenu,"bottom-left",!0),D=0;if(i={top:k.top+"px",display:n?"block":"none"},(d=m.dropdownMenu.hasClass("dropdown-menu-right"))?(i.left="auto",(w=l.scrollbarPadding(y)).heightOverflow&&w.scrollbarWidth&&(D=w.scrollbarWidth),i.right=window.innerWidth-D-(k.left+t.prop("offsetWidth"))+"px"):(i.left=k.left+"px",i.right="auto"),!$){var x=l.offset(y);i.top=k.top-x.top+"px",d?i.right=window.innerWidth-(k.left-x.left+t.prop("offsetWidth"))+"px":i.left=k.left-x.left+"px"}m.dropdownMenu.css(i)}var C=y||t;if(C.hasClass(y?h:g)===!n&&r[n?"addClass":"removeClass"](C,y?h:g).then((function(){angular.isDefined(n)&&n!==a&&v(e,{open:!!n})})),n)m.dropdownMenuTemplateUrl?p(m.dropdownMenuTemplateUrl).then((function(e){c=f.$new(),u(e.trim())(c,(function(e){var t=e;m.dropdownMenu.replaceWith(t),m.dropdownMenu=t,s.on("keydown",o.keybindFilter)}))})):s.on("keydown",o.keybindFilter),f.focusToggleElement(),o.open(f,t);else{if(o.close(f,t),m.dropdownMenuTemplateUrl){c&&c.$destroy();var T=angular.element('<ul class="dropdown-menu"></ul>');m.dropdownMenu.replaceWith(T),m.dropdownMenu=T}m.selectedOption=null}angular.isFunction(b)&&b(e,n)}))}]).directive("uibDropdown",(function(){return{controller:"UibDropdownController",link:function(e,t,n,a){a.init()}}})).directive("uibDropdownMenu",(function(){return{restrict:"A",require:"?^uibDropdown",link:function(e,t,n,a){if(a&&!angular.isDefined(n.dropdownNested)){t.addClass("dropdown-menu");var i=n.templateUrl;i&&(a.dropdownMenuTemplateUrl=i),a.dropdownMenu||(a.dropdownMenu=t)}}}})).directive("uibDropdownToggle",(function(){return{require:"?^uibDropdown",link:function(e,t,n,a){if(a){t.addClass("dropdown-toggle"),a.toggleElement=t;var i=function(i){i.preventDefault(),t.hasClass("disabled")||n.disabled||e.$apply((function(){a.toggle()}))};t.bind("click",i),t.attr({"aria-haspopup":!0,"aria-expanded":!1}),e.$watch(a.isOpen,(function(e){t.attr("aria-expanded",!!e)})),e.$on("$destroy",(function(){t.unbind("click",i)}))}}}})),angular.module("ui.bootstrap.stackedMap",[]).factory("$$stackedMap",(function(){return{createNew:function(){var e=[];return{add:function(t,n){e.push({key:t,value:n})},get:function(t){for(var n=0;n<e.length;n++)if(t===e[n].key)return e[n]},keys:function(){for(var t=[],n=0;n<e.length;n++)t.push(e[n].key);return t},top:function(){return e[e.length-1]},remove:function(t){for(var n=-1,a=0;a<e.length;a++)if(t===e[a].key){n=a;break}return e.splice(n,1)[0]},removeTop:function(){return e.pop()},length:function(){return e.length}}}}})),angular.module("ui.bootstrap.modal",["ui.bootstrap.stackedMap","ui.bootstrap.position"]).factory("$$multiMap",(function(){return{createNew:function(){var e={};return{entries:function(){return Object.keys(e).map((function(t){return{key:t,value:e[t]}}))},get:function(t){return e[t]},hasKey:function(t){return!!e[t]},keys:function(){return Object.keys(e)},put:function(t,n){e[t]||(e[t]=[]),e[t].push(n)},remove:function(t,n){var a=e[t];if(a){var i=a.indexOf(n);-1!==i&&a.splice(i,1),a.length||delete e[t]}}}}}})).provider("$uibResolve",(function(){var e=this;this.resolver=null,this.setResolver=function(e){this.resolver=e},this.$get=["$injector","$q",function(t,n){var a=e.resolver?t.get(e.resolver):null;return{resolve:function(e,i,o,r){if(a)return a.resolve(e,i,o,r);var l=[];return angular.forEach(e,(function(e){angular.isFunction(e)||angular.isArray(e)?l.push(n.resolve(t.invoke(e))):angular.isString(e)?l.push(n.resolve(t.get(e))):l.push(n.resolve(e))})),n.all(l).then((function(t){var n={},a=0;return angular.forEach(e,(function(e,i){n[i]=t[a++]})),n}))}}}]})).directive("uibModalBackdrop",["$animate","$injector","$uibModalStack",function(e,t,n){return{restrict:"A",compile:function(e,t){return e.addClass(t.backdropClass),a}};function a(t,a,i){i.modalInClass&&(e.addClass(a,i.modalInClass),t.$on(n.NOW_CLOSING_EVENT,(function(n,o){var r=o();t.modalOptions.animation?e.removeClass(a,i.modalInClass).then(r):r()})))}}]).directive("uibModalWindow",["$uibModalStack","$q","$animateCss","$document",function(e,t,n,a){return{scope:{index:"@"},restrict:"A",transclude:!0,templateUrl:function(e,t){return t.templateUrl||"uib/template/modal/window.html"},link:function(i,o,r){o.addClass(r.windowTopClass||""),i.size=r.size,i.close=function(t){var n=e.getTop();n&&n.value.backdrop&&"static"!==n.value.backdrop&&t.target===t.currentTarget&&(t.preventDefault(),t.stopPropagation(),e.dismiss(n.key,"backdrop click"))},o.on("click",i.close),i.$isRendered=!0;var l=t.defer();i.$$postDigest((function(){l.resolve()})),l.promise.then((function(){var l=null;r.modalInClass&&(l=n(o,{addClass:r.modalInClass}).start(),i.$on(e.NOW_CLOSING_EVENT,(function(e,t){var a=t();n(o,{removeClass:r.modalInClass}).start().then(a)}))),t.when(l).then((function(){var t=e.getTop();if(t&&e.modalRendered(t.key),!a[0].activeElement||!o[0].contains(a[0].activeElement)){var n=o[0].querySelector("[autofocus]");n?n.focus():o[0].focus()}}))}))}}}]).directive("uibModalAnimationClass",(function(){return{compile:function(e,t){t.modalAnimation&&e.addClass(t.uibModalAnimationClass)}}})).directive("uibModalTransclude",["$animate",function(e){return{link:function(t,n,a,i,o){o(t.$parent,(function(t){n.empty(),e.enter(t,n)}))}}}]).factory("$uibModalStack",["$animate","$animateCss","$document","$compile","$rootScope","$q","$$multiMap","$$stackedMap","$uibPosition",function(e,t,n,a,i,o,r,l,s){var u,p,c,d=l.createNew(),m=r.createNew(),f={NOW_CLOSING_EVENT:"modal.stack.now-closing"},h=0,g=null,b=/[A-Z]/g;function v(){for(var e=-1,t=d.keys(),n=0;n<t.length;n++)d.get(t[n]).value.backdrop&&(e=n);return e>-1&&e<h&&(e=h),e}function $(e,t){var n=d.get(e).value,a=n.appendTo;d.remove(e),(g=d.top())&&(h=parseInt(g.value.modalDomEl.attr("index"),10)),w(n.modalDomEl,n.modalScope,(function(){var t=n.openedClass||"modal-open";m.remove(t,e);var i=m.hasKey(t);a.toggleClass(t,i),!i&&c&&c.heightOverflow&&c.scrollbarWidth&&(c.originalRight?a.css({paddingRight:c.originalRight+"px"}):a.css({paddingRight:""}),c=null),y(!0)}),n.closedDeferred),function(){if(u&&-1===v()){w(u,p,(function(){null})),u=void 0,p=void 0}}(),t&&t.focus?t.focus():a.focus&&a.focus()}function y(e){var t;d.length()>0&&(t=d.top().value).modalDomEl.toggleClass(t.windowTopClass||"",e)}function w(t,n,a,i){var r,l=null;return n.$broadcast(f.NOW_CLOSING_EVENT,(function(){return r||(r=o.defer(),l=r.promise),function(){r.resolve()}})),o.when(l).then((function o(){if(o.done)return;o.done=!0,e.leave(t).then((function(){a&&a(),t.remove(),i&&i.resolve()})),n.$destroy()}))}function k(e){if(e.isDefaultPrevented())return e;var t=d.top();if(t)switch(e.which){case 27:t.value.keyboard&&(e.preventDefault(),i.$apply((function(){f.dismiss(t.key,"escape key press")})));break;case 9:var n=f.loadFocusElementList(t),a=!1;e.shiftKey?(f.isFocusInFirstItem(e,n)||f.isModalFocused(e,t))&&(a=f.focusLastFocusableElement(n)):f.isFocusInLastItem(e,n)&&(a=f.focusFirstFocusableElement(n)),a&&(e.preventDefault(),e.stopPropagation())}}function D(e,t,n){return!e.value.modalScope.$broadcast("modal.closing",t,n).defaultPrevented}return i.$watch(v,(function(e){p&&(p.index=e)})),n.on("keydown",k),i.$on("$destroy",(function(){n.off("keydown",k)})),f.open=function(t,o){var r=n[0].activeElement,l=o.openedClass||"modal-open";y(!1),g=d.top(),d.add(t,{deferred:o.deferred,renderDeferred:o.renderDeferred,closedDeferred:o.closedDeferred,modalScope:o.scope,backdrop:o.backdrop,keyboard:o.keyboard,openedClass:o.openedClass,windowTopClass:o.windowTopClass,animation:o.animation,appendTo:o.appendTo}),m.put(l,t);var f,$=o.appendTo,w=v();if(!$.length)throw new Error("appendTo element not found. Make sure that the element passed is in DOM.");w>=0&&!u&&((p=i.$new(!0)).modalOptions=o,p.index=w,(u=angular.element('<div uib-modal-backdrop="modal-backdrop"></div>')).attr({class:"modal-backdrop","ng-style":"{'z-index': 1040 + (index && 1 || 0) + index*10}","uib-modal-animation-class":"fade","modal-in-class":"in"}),o.backdropClass&&u.addClass(o.backdropClass),o.animation&&u.attr("modal-animation","true"),a(u)(p),e.enter(u,$),s.isScrollable($)&&(c=s.scrollbarPadding($)).heightOverflow&&c.scrollbarWidth&&$.css({paddingRight:c.right+"px"})),o.component?(f=document.createElement(o.component.name.replace(b,(function(e,t){return(t?"-":"")+e.toLowerCase()}))),(f=angular.element(f)).attr({resolve:"$resolve","modal-instance":"$uibModalInstance",close:"$close($value)",dismiss:"$dismiss($value)"})):f=o.content,h=g?parseInt(g.value.modalDomEl.attr("index"),10)+1:0;var k=angular.element('<div uib-modal-window="modal-window"></div>');k.attr({class:"modal","template-url":o.windowTemplateUrl,"window-top-class":o.windowTopClass,role:"dialog","aria-labelledby":o.ariaLabelledBy,"aria-describedby":o.ariaDescribedBy,size:o.size,index:h,animate:"animate","ng-style":"{'z-index': 1050 + $$topModalIndex*10, display: 'block'}",tabindex:-1,"uib-modal-animation-class":"fade","modal-in-class":"in"}).append(f),o.windowClass&&k.addClass(o.windowClass),o.animation&&k.attr("modal-animation","true"),$.addClass(l),o.scope&&(o.scope.$$topModalIndex=h),e.enter(a(k)(o.scope),$),d.top().value.modalDomEl=k,d.top().value.modalOpener=r},f.close=function(e,t){var n=d.get(e);return n&&D(n,t,!0)?(n.value.modalScope.$$uibDestructionScheduled=!0,n.value.deferred.resolve(t),$(e,n.value.modalOpener),!0):!n},f.dismiss=function(e,t){var n=d.get(e);return n&&D(n,t,!1)?(n.value.modalScope.$$uibDestructionScheduled=!0,n.value.deferred.reject(t),$(e,n.value.modalOpener),!0):!n},f.dismissAll=function(e){for(var t=this.getTop();t&&this.dismiss(t.key,e);)t=this.getTop()},f.getTop=function(){return d.top()},f.modalRendered=function(e){var t=d.get(e);t&&t.value.renderDeferred.resolve()},f.focusFirstFocusableElement=function(e){return e.length>0&&(e[0].focus(),!0)},f.focusLastFocusableElement=function(e){return e.length>0&&(e[e.length-1].focus(),!0)},f.isModalFocused=function(e,t){if(e&&t){var n=t.value.modalDomEl;if(n&&n.length)return(e.target||e.srcElement)===n[0]}return!1},f.isFocusInFirstItem=function(e,t){return t.length>0&&(e.target||e.srcElement)===t[0]},f.isFocusInLastItem=function(e,t){return t.length>0&&(e.target||e.srcElement)===t[t.length-1]},f.loadFocusElementList=function(e){if(e){var t=e.value.modalDomEl;if(t&&t.length){var n=t[0].querySelectorAll("a[href], area[href], input:not([disabled]):not([tabindex='-1']), button:not([disabled]):not([tabindex='-1']),select:not([disabled]):not([tabindex='-1']), textarea:not([disabled]):not([tabindex='-1']), iframe, object, embed, *[tabindex]:not([tabindex='-1']), *[contenteditable=true]");return n?Array.prototype.filter.call(n,(function(e){return function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)}(e)})):n}}},f}]).provider("$uibModal",(function(){var e={options:{animation:!0,backdrop:!0,keyboard:!0},$get:["$rootScope","$q","$document","$templateRequest","$controller","$uibResolve","$uibModalStack",function(t,n,a,i,o,r,l){var s={};var u=null;return s.getPromiseChain=function(){return u},s.open=function(s){var p,c,d,m=n.defer(),f=n.defer(),h=n.defer(),g=n.defer(),b={result:m.promise,opened:f.promise,closed:h.promise,rendered:g.promise,close:function(e){return l.close(b,e)},dismiss:function(e){return l.dismiss(b,e)}};if((s=angular.extend({},e.options,s)).resolve=s.resolve||{},s.appendTo=s.appendTo||a.find("body").eq(0),!s.component&&!s.template&&!s.templateUrl)throw new Error("One of component or template or templateUrl options is required.");function v(){return p}return p=s.component?n.when(r.resolve(s.resolve,{},null,null)):n.all([(c=s,c.template?n.when(c.template):i(angular.isFunction(c.templateUrl)?c.templateUrl():c.templateUrl)),r.resolve(s.resolve,{},null,null)]),d=u=n.all([u]).then(v,v).then((function(e){var n=s.scope||t,a=n.$new();a.$close=b.close,a.$dismiss=b.dismiss,a.$on("$destroy",(function(){a.$$uibDestructionScheduled||a.$dismiss("$uibUnscheduledDestruction")}));var i,r,u={scope:a,deferred:m,renderDeferred:g,closedDeferred:h,animation:s.animation,backdrop:s.backdrop,keyboard:s.keyboard,backdropClass:s.backdropClass,windowTopClass:s.windowTopClass,windowClass:s.windowClass,windowTemplateUrl:s.windowTemplateUrl,ariaLabelledBy:s.ariaLabelledBy,ariaDescribedBy:s.ariaDescribedBy,size:s.size,openedClass:s.openedClass,appendTo:s.appendTo},p={},c={};function d(t,n,i,o){t.$scope=a,t.$scope.$resolve={},i?t.$scope.$uibModalInstance=b:t.$uibModalInstance=b;var r=n?e[1]:e;angular.forEach(r,(function(e,n){o&&(t[n]=e),t.$scope.$resolve[n]=e}))}s.component?(d(p,!1,!0,!1),p.name=s.component,u.component=p):s.controller&&(d(c,!0,!1,!0),r=o(s.controller,c,!0,s.controllerAs),s.controllerAs&&s.bindToController&&((i=r.instance).$close=a.$close,i.$dismiss=a.$dismiss,angular.extend(i,{$resolve:c.$scope.$resolve},n)),i=r(),angular.isFunction(i.$onInit)&&i.$onInit()),s.component||(u.content=e[0]),l.open(b,u),f.resolve(!0)}),(function(e){f.reject(e),m.reject(e)})).finally((function(){u===d&&(u=null)})),b},s}]};return e})),angular.module("ui.bootstrap.paging",[]).factory("uibPaging",["$parse",function(e){return{create:function(t,n,a){t.setNumPages=a.numPages?e(a.numPages).assign:angular.noop,t.ngModelCtrl={$setViewValue:angular.noop},t._watchers=[],t.init=function(e,i){t.ngModelCtrl=e,t.config=i,e.$render=function(){t.render()},a.itemsPerPage?t._watchers.push(n.$parent.$watch(a.itemsPerPage,(function(e){t.itemsPerPage=parseInt(e,10),n.totalPages=t.calculateTotalPages(),t.updatePage()}))):t.itemsPerPage=i.itemsPerPage,n.$watch("totalItems",(function(e,a){(angular.isDefined(e)||e!==a)&&(n.totalPages=t.calculateTotalPages(),t.updatePage())}))},t.calculateTotalPages=function(){var e=t.itemsPerPage<1?1:Math.ceil(n.totalItems/t.itemsPerPage);return Math.max(e||0,1)},t.render=function(){n.page=parseInt(t.ngModelCtrl.$viewValue,10)||1},n.selectPage=function(e,a){a&&a.preventDefault(),(!n.ngDisabled||!a)&&n.page!==e&&e>0&&e<=n.totalPages&&(a&&a.target&&a.target.blur(),t.ngModelCtrl.$setViewValue(e),t.ngModelCtrl.$render())},n.getText=function(e){return n[e+"Text"]||t.config[e+"Text"]},n.noPrevious=function(){return 1===n.page},n.noNext=function(){return n.page===n.totalPages},t.updatePage=function(){t.setNumPages(n.$parent,n.totalPages),n.page>n.totalPages?n.selectPage(n.totalPages):t.ngModelCtrl.$render()},n.$on("$destroy",(function(){for(;t._watchers.length;)t._watchers.shift()()}))}}}]),angular.module("ui.bootstrap.pager",["ui.bootstrap.paging","ui.bootstrap.tabindex"]).controller("UibPagerController",["$scope","$attrs","uibPaging","uibPagerConfig",function(e,t,n,a){e.align=angular.isDefined(t.align)?e.$parent.$eval(t.align):a.align,n.create(this,e,t)}]).constant("uibPagerConfig",{itemsPerPage:10,previousText:"« Previous",nextText:"Next »",align:!0}).directive("uibPager",["uibPagerConfig",function(e){return{scope:{totalItems:"=",previousText:"@",nextText:"@",ngDisabled:"="},require:["uibPager","?ngModel"],restrict:"A",controller:"UibPagerController",controllerAs:"pager",templateUrl:function(e,t){return t.templateUrl||"uib/template/pager/pager.html"},link:function(t,n,a,i){n.addClass("pager");var o=i[0],r=i[1];r&&o.init(r,e)}}}]),angular.module("ui.bootstrap.pagination",["ui.bootstrap.paging","ui.bootstrap.tabindex"]).controller("UibPaginationController",["$scope","$attrs","$parse","uibPaging","uibPaginationConfig",function(e,t,n,a,i){var o=this,r=angular.isDefined(t.maxSize)?e.$parent.$eval(t.maxSize):i.maxSize,l=angular.isDefined(t.rotate)?e.$parent.$eval(t.rotate):i.rotate,s=angular.isDefined(t.forceEllipses)?e.$parent.$eval(t.forceEllipses):i.forceEllipses,u=angular.isDefined(t.boundaryLinkNumbers)?e.$parent.$eval(t.boundaryLinkNumbers):i.boundaryLinkNumbers,p=angular.isDefined(t.pageLabel)?function(n){return e.$parent.$eval(t.pageLabel,{$page:n})}:angular.identity;function c(e,t,n){return{number:e,text:t,active:n}}e.boundaryLinks=angular.isDefined(t.boundaryLinks)?e.$parent.$eval(t.boundaryLinks):i.boundaryLinks,e.directionLinks=angular.isDefined(t.directionLinks)?e.$parent.$eval(t.directionLinks):i.directionLinks,a.create(this,e,t),t.maxSize&&o._watchers.push(e.$parent.$watch(n(t.maxSize),(function(e){r=parseInt(e,10),o.render()})));var d=this.render;this.render=function(){d(),e.page>0&&e.page<=e.totalPages&&(e.pages=function(e,t){var n=[],a=1,i=t,o=angular.isDefined(r)&&r<t;o&&(l?(i=(a=Math.max(e-Math.floor(r/2),1))+r-1)>t&&(a=(i=t)-r+1):(a=(Math.ceil(e/r)-1)*r+1,i=Math.min(a+r-1,t)));for(var d=a;d<=i;d++){var m=c(d,p(d),d===e);n.push(m)}if(o&&r>0&&(!l||s||u)){if(a>1){if(!u||a>3){var f=c(a-1,"...",!1);n.unshift(f)}if(u){if(3===a){var h=c(2,"2",!1);n.unshift(h)}var g=c(1,"1",!1);n.unshift(g)}}if(i<t){if(!u||i<t-2){var b=c(i+1,"...",!1);n.push(b)}if(u){if(i===t-2){var v=c(t-1,t-1,!1);n.push(v)}var $=c(t,t,!1);n.push($)}}}return n}(e.page,e.totalPages))}}]).constant("uibPaginationConfig",{itemsPerPage:10,boundaryLinks:!1,boundaryLinkNumbers:!1,directionLinks:!0,firstText:"First",previousText:"Previous",nextText:"Next",lastText:"Last",rotate:!0,forceEllipses:!1}).directive("uibPagination",["$parse","uibPaginationConfig",function(e,t){return{scope:{totalItems:"=",firstText:"@",previousText:"@",nextText:"@",lastText:"@",ngDisabled:"="},require:["uibPagination","?ngModel"],restrict:"A",controller:"UibPaginationController",controllerAs:"pagination",templateUrl:function(e,t){return t.templateUrl||"uib/template/pagination/pagination.html"},link:function(e,n,a,i){n.addClass("pagination");var o=i[0],r=i[1];r&&o.init(r,t)}}}]),angular.module("ui.bootstrap.tooltip",["ui.bootstrap.position","ui.bootstrap.stackedMap"]).provider("$uibTooltip",(function(){var e={placement:"top",placementClassPrefix:"",animation:!0,popupDelay:0,popupCloseDelay:0,useContentExp:!1},t={mouseenter:"mouseleave",click:"click",outsideClick:"outsideClick",focus:"blur",none:""},n={};this.options=function(e){angular.extend(n,e)},this.setTriggers=function(e){angular.extend(t,e)},this.$get=["$window","$compile","$timeout","$document","$uibPosition","$interpolate","$rootScope","$parse","$$stackedMap",function(a,i,o,r,l,s,u,p,c){var d=c.createNew();function m(e){if(27===e.which){var t=d.top();t&&(t.value.close(),t=null)}}return r.on("keyup",m),u.$on("$destroy",(function(){r.off("keyup",m)})),function(a,u,c,m){function f(e){var n=(e||m.trigger||c).split(" "),a=n.map((function(e){return t[e]||e}));return{show:n,hide:a}}m=angular.extend({},e,n,m);var h=a.replace(/[A-Z]/g,(function(e,t){return(t?"-":"")+e.toLowerCase()})),g=s.startSymbol(),b=s.endSymbol(),v="<div "+h+'-popup uib-title="'+g+"title"+b+'" '+(m.useContentExp?'content-exp="contentExp()" ':'content="'+g+"content"+b+'" ')+'origin-scope="origScope" class="uib-position-measure '+u+'" tooltip-animation-class="fade"uib-tooltip-classes ng-class="{ in: isOpen }" ></div>';return{compile:function(e,t){var n=i(v);return function(e,t,i,s){var c,h,g,b,v,$,y,w=!!angular.isDefined(m.appendToBody)&&m.appendToBody,k=f(void 0),D=angular.isDefined(i[u+"Enable"]),x=e.$new(!0),C=!1,T=!!angular.isDefined(i[u+"IsOpen"])&&p(i[u+"IsOpen"]),M=!!m.useContentExp&&p(i[a]),O=[],P=function(){c&&c.html()&&($||($=o((function(){var e=l.positionElements(t,c,x.placement,w),n=angular.isDefined(c.offsetHeight)?c.offsetHeight:c.prop("offsetHeight"),a=w?l.offset(t):l.position(t);c.css({top:e.top+"px",left:e.left+"px"});var i=e.placement.split("-");c.hasClass(i[0])||(c.removeClass(y.split("-")[0]),c.addClass(i[0])),c.hasClass(m.placementClassPrefix+e.placement)||(c.removeClass(m.placementClassPrefix+y),c.addClass(m.placementClassPrefix+e.placement)),o((function(){var e=angular.isDefined(c.offsetHeight)?c.offsetHeight:c.prop("offsetHeight"),t=l.adjustTop(i,a,n,e);t&&c.css(t)}),0,!1),c.hasClass("uib-position-measure")?(l.positionArrow(c,e.placement),c.removeClass("uib-position-measure")):y!==e.placement&&l.positionArrow(c,e.placement),y=e.placement,$=null}),0,!1)))};function S(){x.isOpen?I():E()}function E(){D&&!e.$eval(i[u+"Enable"])||(F(),function(){x.title=i[u+"Title"],x.content=M?M(e):i[a];x.popupClass=i[u+"Class"],x.placement=angular.isDefined(i[u+"Placement"])?i[u+"Placement"]:m.placement;var t=l.parsePlacement(x.placement);y=t[1]?t[0]+"-"+t[1]:t[0];var n=parseInt(i[u+"PopupDelay"],10),o=parseInt(i[u+"PopupCloseDelay"],10);x.popupDelay=isNaN(n)?m.popupDelay:n,x.popupCloseDelay=isNaN(o)?m.popupCloseDelay:o}(),x.popupDelay?b||(b=o(A,x.popupDelay,!1)):A())}function I(){U(),x.popupCloseDelay?v||(v=o(N,x.popupCloseDelay,!1)):N()}function A(){if(U(),F(),!x.content)return angular.noop;!function(){if(c)return;h=x.$new(),c=n(h,(function(e){w?r.find("body").append(e):t.after(e)})),d.add(x,{close:N}),function(){O.length=0,M?(O.push(e.$watch(M,(function(e){x.content=e,!e&&x.isOpen&&N()}))),O.push(h.$watch((function(){C||(C=!0,h.$$postDigest((function(){C=!1,x&&x.isOpen&&P()})))})))):O.push(i.$observe(a,(function(e){x.content=e,!e&&x.isOpen?N():P()})));O.push(i.$observe(u+"Title",(function(e){x.title=e,x.isOpen&&P()}))),O.push(i.$observe(u+"Placement",(function(e){x.placement=e||m.placement,x.isOpen&&P()})))}()}(),x.$evalAsync((function(){x.isOpen=!0,R(!0),P()}))}function U(){b&&(o.cancel(b),b=null),$&&(o.cancel($),$=null)}function N(){x&&x.$evalAsync((function(){x&&(x.isOpen=!1,R(!1),x.animation?g||(g=o(H,150,!1)):H())}))}function F(){v&&(o.cancel(v),v=null),g&&(o.cancel(g),g=null)}function H(){U(),F(),O.length&&(angular.forEach(O,(function(e){e()})),O.length=0),c&&(c.remove(),c=null),d.remove(x),h&&(h.$destroy(),h=null)}function R(t){T&&angular.isFunction(T.assign)&&T.assign(e,t)}function V(e){x&&x.isOpen&&c&&(t[0].contains(e.target)||c[0].contains(e.target)||I())}x.origScope=e,x.isOpen=!1,x.contentExp=function(){return x.content},i.$observe("disabled",(function(e){e&&U(),e&&x.isOpen&&N()})),T&&e.$watch(T,(function(e){x&&!e===x.isOpen&&S()}));var q,z,L,Y=function(){k.show.forEach((function(e){"outsideClick"===e?t.off("click",S):(t.off(e,E),t.off(e,S))})),k.hide.forEach((function(e){"outsideClick"===e?r.off("click",V):t.off(e,I)}))};q=[],z=[],L=e.$eval(i[u+"Trigger"]),Y(),angular.isObject(L)?(Object.keys(L).forEach((function(e){q.push(e),z.push(L[e])})),k={show:q,hide:z}):k=f(L),"none"!==k.show&&k.show.forEach((function(e,n){"outsideClick"===e?(t.on("click",S),r.on("click",V)):e===k.hide[n]?t.on(e,S):e&&(t.on(e,E),t.on(k.hide[n],I)),t.on("keypress",(function(e){27===e.which&&I()}))}));var B,W=e.$eval(i[u+"Animation"]);x.animation=angular.isDefined(W)?!!W:m.animation;var j=u+"AppendToBody";B=j in i&&void 0===i[j]||e.$eval(i[j]),w=angular.isDefined(B)?B:w,e.$on("$destroy",(function(){Y(),H(),x=null}))}}}}}]})).directive("uibTooltipTemplateTransclude",["$animate","$sce","$compile","$templateRequest",function(e,t,n,a){return{link:function(i,o,r){var l,s,u,p=i.$eval(r.tooltipTemplateTranscludeScope),c=0,d=function(){s&&(s.remove(),s=null),l&&(l.$destroy(),l=null),u&&(e.leave(u).then((function(){s=null})),s=u,u=null)};i.$watch(t.parseAsResourceUrl(r.uibTooltipTemplateTransclude),(function(t){var r=++c;t?(a(t,!0).then((function(a){if(r===c){var i=p.$new(),s=n(a)(i,(function(t){d(),e.enter(t,o)}));u=s,(l=i).$emit("$includeContentLoaded",t)}}),(function(){r===c&&(d(),i.$emit("$includeContentError",t))})),i.$emit("$includeContentRequested",t)):d()})),i.$on("$destroy",d)}}}]).directive("uibTooltipClasses",["$uibPosition",function(e){return{restrict:"A",link:function(t,n,a){if(t.placement){var i=e.parsePlacement(t.placement);n.addClass(i[0])}t.popupClass&&n.addClass(t.popupClass),t.animation&&n.addClass(a.tooltipAnimationClass)}}}]).directive("uibTooltipPopup",(function(){return{restrict:"A",scope:{content:"@"},templateUrl:"uib/template/tooltip/tooltip-popup.html"}})).directive("uibTooltip",["$uibTooltip",function(e){return e("uibTooltip","tooltip","mouseenter")}]).directive("uibTooltipTemplatePopup",(function(){return{restrict:"A",scope:{contentExp:"&",originScope:"&"},templateUrl:"uib/template/tooltip/tooltip-template-popup.html"}})).directive("uibTooltipTemplate",["$uibTooltip",function(e){return e("uibTooltipTemplate","tooltip","mouseenter",{useContentExp:!0})}]).directive("uibTooltipHtmlPopup",(function(){return{restrict:"A",scope:{contentExp:"&"},templateUrl:"uib/template/tooltip/tooltip-html-popup.html"}})).directive("uibTooltipHtml",["$uibTooltip",function(e){return e("uibTooltipHtml","tooltip","mouseenter",{useContentExp:!0})}]),angular.module("ui.bootstrap.popover",["ui.bootstrap.tooltip"]).directive("uibPopoverTemplatePopup",(function(){return{restrict:"A",scope:{uibTitle:"@",contentExp:"&",originScope:"&"},templateUrl:"uib/template/popover/popover-template.html"}})).directive("uibPopoverTemplate",["$uibTooltip",function(e){return e("uibPopoverTemplate","popover","click",{useContentExp:!0})}]).directive("uibPopoverHtmlPopup",(function(){return{restrict:"A",scope:{contentExp:"&",uibTitle:"@"},templateUrl:"uib/template/popover/popover-html.html"}})).directive("uibPopoverHtml",["$uibTooltip",function(e){return e("uibPopoverHtml","popover","click",{useContentExp:!0})}]).directive("uibPopoverPopup",(function(){return{restrict:"A",scope:{uibTitle:"@",content:"@"},templateUrl:"uib/template/popover/popover.html"}})).directive("uibPopover",["$uibTooltip",function(e){return e("uibPopover","popover","click")}]),angular.module("ui.bootstrap.progressbar",[]).constant("uibProgressConfig",{animate:!0,max:100}).controller("UibProgressController",["$scope","$attrs","uibProgressConfig",function(e,t,n){var a=this,i=angular.isDefined(t.animate)?e.$parent.$eval(t.animate):n.animate;function o(){return angular.isDefined(e.maxParam)?e.maxParam:n.max}this.bars=[],e.max=o(),this.addBar=function(e,t,n){i||t.css({transition:"none"}),this.bars.push(e),e.max=o(),e.title=n&&angular.isDefined(n.title)?n.title:"progressbar",e.$watch("value",(function(t){e.recalculatePercentage()})),e.recalculatePercentage=function(){var t=a.bars.reduce((function(e,t){return t.percent=+(100*t.value/t.max).toFixed(2),e+t.percent}),0);t>100&&(e.percent-=t-100)},e.$on("$destroy",(function(){t=null,a.removeBar(e)}))},this.removeBar=function(e){this.bars.splice(this.bars.indexOf(e),1),this.bars.forEach((function(e){e.recalculatePercentage()}))},e.$watch("maxParam",(function(e){a.bars.forEach((function(e){e.max=o(),e.recalculatePercentage()}))}))}]).directive("uibProgress",(function(){return{replace:!0,transclude:!0,controller:"UibProgressController",require:"uibProgress",scope:{maxParam:"=?max"},templateUrl:"uib/template/progressbar/progress.html"}})).directive("uibBar",(function(){return{replace:!0,transclude:!0,require:"^uibProgress",scope:{value:"=",type:"@"},templateUrl:"uib/template/progressbar/bar.html",link:function(e,t,n,a){a.addBar(e,t,n)}}})).directive("uibProgressbar",(function(){return{replace:!0,transclude:!0,controller:"UibProgressController",scope:{value:"=",maxParam:"=?max",type:"@"},templateUrl:"uib/template/progressbar/progressbar.html",link:function(e,t,n,a){a.addBar(e,angular.element(t.children()[0]),{title:n.title})}}})),angular.module("ui.bootstrap.rating",[]).constant("uibRatingConfig",{max:5,stateOn:null,stateOff:null,enableReset:!0,titles:["one","two","three","four","five"]}).controller("UibRatingController",["$scope","$attrs","uibRatingConfig",function(e,t,n){var a={$setViewValue:angular.noop},i=this;this.init=function(i){(a=i).$render=this.render,a.$formatters.push((function(e){return angular.isNumber(e)&&e<<0!==e&&(e=Math.round(e)),e})),this.stateOn=angular.isDefined(t.stateOn)?e.$parent.$eval(t.stateOn):n.stateOn,this.stateOff=angular.isDefined(t.stateOff)?e.$parent.$eval(t.stateOff):n.stateOff,this.enableReset=angular.isDefined(t.enableReset)?e.$parent.$eval(t.enableReset):n.enableReset;var o=angular.isDefined(t.titles)?e.$parent.$eval(t.titles):n.titles;this.titles=angular.isArray(o)&&o.length>0?o:n.titles;var r=angular.isDefined(t.ratingStates)?e.$parent.$eval(t.ratingStates):new Array(angular.isDefined(t.max)?e.$parent.$eval(t.max):n.max);e.range=this.buildTemplateObjects(r)},this.buildTemplateObjects=function(e){for(var t=0,n=e.length;t<n;t++)e[t]=angular.extend({index:t},{stateOn:this.stateOn,stateOff:this.stateOff,title:this.getTitle(t)},e[t]);return e},this.getTitle=function(e){return e>=this.titles.length?e+1:this.titles[e]},e.rate=function(t){if(!e.readonly&&t>=0&&t<=e.range.length){var n=i.enableReset&&a.$viewValue===t?0:t;a.$setViewValue(n),a.$render()}},e.enter=function(t){e.readonly||(e.value=t),e.onHover({value:t})},e.reset=function(){e.value=a.$viewValue,e.onLeave()},e.onKeydown=function(t){/(37|38|39|40)/.test(t.which)&&(t.preventDefault(),t.stopPropagation(),e.rate(e.value+(38===t.which||39===t.which?1:-1)))},this.render=function(){e.value=a.$viewValue,e.title=i.getTitle(e.value-1)}}]).directive("uibRating",(function(){return{require:["uibRating","ngModel"],restrict:"A",scope:{readonly:"=?readOnly",onHover:"&",onLeave:"&"},controller:"UibRatingController",templateUrl:"uib/template/rating/rating.html",link:function(e,t,n,a){var i=a[0],o=a[1];i.init(o)}}})),angular.module("ui.bootstrap.tabs",[]).controller("UibTabsetController",["$scope",function(e){var t,n,a=this;function i(e){for(var t=0;t<a.tabs.length;t++)if(a.tabs[t].index===e)return t}a.tabs=[],a.select=function(e,o){if(!n){var r=i(t),l=a.tabs[r];if(l){if(l.tab.onDeselect({$event:o,$selectedIndex:e}),o&&o.isDefaultPrevented())return;l.tab.active=!1}var s=a.tabs[e];s?(s.tab.onSelect({$event:o}),s.tab.active=!0,a.active=s.index,t=s.index):!s&&angular.isDefined(t)&&(a.active=null,t=null)}},a.addTab=function(e){if(a.tabs.push({tab:e,index:e.index}),a.tabs.sort((function(e,t){return e.index>t.index?1:e.index<t.index?-1:0})),e.index===a.active||!angular.isDefined(a.active)&&1===a.tabs.length){var t=i(e.index);a.select(t)}},a.removeTab=function(e){for(var t,n=0;n<a.tabs.length;n++)if(a.tabs[n].tab===e){t=n;break}if(a.tabs[t].index===a.active){var i=t===a.tabs.length-1?t-1:t+1%a.tabs.length;a.select(i)}a.tabs.splice(t,1)},e.$watch("tabset.active",(function(e){angular.isDefined(e)&&e!==t&&a.select(i(e))})),e.$on("$destroy",(function(){n=!0}))}]).directive("uibTabset",(function(){return{transclude:!0,replace:!0,scope:{},bindToController:{active:"=?",type:"@"},controller:"UibTabsetController",controllerAs:"tabset",templateUrl:function(e,t){return t.templateUrl||"uib/template/tabs/tabset.html"},link:function(e,t,n){e.vertical=!!angular.isDefined(n.vertical)&&e.$parent.$eval(n.vertical),e.justified=!!angular.isDefined(n.justified)&&e.$parent.$eval(n.justified)}}})).directive("uibTab",["$parse",function(e){return{require:"^uibTabset",replace:!0,templateUrl:function(e,t){return t.templateUrl||"uib/template/tabs/tab.html"},transclude:!0,scope:{heading:"@",index:"=?",classes:"@?",onSelect:"&select",onDeselect:"&deselect"},controller:function(){},controllerAs:"tab",link:function(t,n,a,i,o){t.disabled=!1,a.disable&&t.$parent.$watch(e(a.disable),(function(e){t.disabled=!!e})),angular.isUndefined(a.index)&&(i.tabs&&i.tabs.length?t.index=Math.max.apply(null,i.tabs.map((function(e){return e.index})))+1:t.index=0),angular.isUndefined(a.classes)&&(t.classes=""),t.select=function(e){if(!t.disabled){for(var n,a=0;a<i.tabs.length;a++)if(i.tabs[a].tab===t){n=a;break}i.select(n,e)}},i.addTab(t),t.$on("$destroy",(function(){i.removeTab(t)})),t.$transcludeFn=o}}}]).directive("uibTabHeadingTransclude",(function(){return{restrict:"A",require:"^uibTab",link:function(e,t){e.$watch("headingElement",(function(e){e&&(t.html(""),t.append(e))}))}}})).directive("uibTabContentTransclude",(function(){return{restrict:"A",require:"^uibTabset",link:function(e,t,n){var a=e.$eval(n.uibTabContentTransclude).tab;a.$transcludeFn(a.$parent,(function(e){angular.forEach(e,(function(e){!function(e){return e.tagName&&(e.hasAttribute("uib-tab-heading")||e.hasAttribute("data-uib-tab-heading")||e.hasAttribute("x-uib-tab-heading")||"uib-tab-heading"===e.tagName.toLowerCase()||"data-uib-tab-heading"===e.tagName.toLowerCase()||"x-uib-tab-heading"===e.tagName.toLowerCase()||"uib:tab-heading"===e.tagName.toLowerCase())}(e)?t.append(e):a.headingElement=e}))}))}}})),angular.module("ui.bootstrap.timepicker",[]).constant("uibTimepickerConfig",{hourStep:1,minuteStep:1,secondStep:1,showMeridian:!0,showSeconds:!1,meridians:null,readonlyInput:!1,mousewheel:!0,arrowkeys:!0,showSpinners:!0,templateUrl:"uib/template/timepicker/timepicker.html"}).controller("UibTimepickerController",["$scope","$element","$attrs","$parse","$log","$locale","uibTimepickerConfig",function(e,t,n,a,i,o,r){var l=new Date,s=[],u={$setViewValue:angular.noop},p=angular.isDefined(n.meridians)?e.$parent.$eval(n.meridians):r.meridians||o.DATETIME_FORMATS.AMPMS,c=!angular.isDefined(n.padHours)||e.$parent.$eval(n.padHours);e.tabindex=angular.isDefined(n.tabindex)?n.tabindex:0,t.removeAttr("tabindex"),this.init=function(t,a){(u=t).$render=this.render,u.$formatters.unshift((function(e){return e?new Date(e):null}));var i=a.eq(0),o=a.eq(1),l=a.eq(2);(angular.isDefined(n.mousewheel)?e.$parent.$eval(n.mousewheel):r.mousewheel)&&this.setupMousewheelEvents(i,o,l),(angular.isDefined(n.arrowkeys)?e.$parent.$eval(n.arrowkeys):r.arrowkeys)&&this.setupArrowkeyEvents(i,o,l),e.readonlyInput=angular.isDefined(n.readonlyInput)?e.$parent.$eval(n.readonlyInput):r.readonlyInput,this.setupInputEvents(i,o,l)};var d=r.hourStep;n.hourStep&&s.push(e.$parent.$watch(a(n.hourStep),(function(e){d=+e})));var m,f,h=r.minuteStep;n.minuteStep&&s.push(e.$parent.$watch(a(n.minuteStep),(function(e){h=+e}))),s.push(e.$parent.$watch(a(n.min),(function(e){var t=new Date(e);m=isNaN(t)?void 0:t}))),s.push(e.$parent.$watch(a(n.max),(function(e){var t=new Date(e);f=isNaN(t)?void 0:t})));var g=!1;n.ngDisabled&&s.push(e.$parent.$watch(a(n.ngDisabled),(function(e){g=e}))),e.noIncrementHours=function(){var e=C(l,60*d);return g||e>f||e<l&&e<m},e.noDecrementHours=function(){var e=C(l,60*-d);return g||e<m||e>l&&e>f},e.noIncrementMinutes=function(){var e=C(l,h);return g||e>f||e<l&&e<m},e.noDecrementMinutes=function(){var e=C(l,-h);return g||e<m||e>l&&e>f},e.noIncrementSeconds=function(){var e=T(l,b);return g||e>f||e<l&&e<m},e.noDecrementSeconds=function(){var e=T(l,-b);return g||e<m||e>l&&e>f},e.noToggleMeridian=function(){return l.getHours()<12?g||C(l,720)>f:g||C(l,-720)<m};var b=r.secondStep;function v(){var t=+e.hours;if((e.showMeridian?t>0&&t<13:t>=0&&t<24)&&""!==e.hours)return e.showMeridian&&(12===t&&(t=0),e.meridian===p[1]&&(t+=12)),t}function $(){var t=+e.minutes;if(t>=0&&t<60&&""!==e.minutes)return t}function y(e,t){return null===e?"":angular.isDefined(e)&&e.toString().length<2&&!t?"0"+e:e.toString()}function w(e){k(),u.$setViewValue(new Date(l)),D(e)}function k(){u.$setValidity("time",!0),e.invalidHours=!1,e.invalidMinutes=!1,e.invalidSeconds=!1}function D(t){if(u.$modelValue){var n=l.getHours(),a=l.getMinutes(),i=l.getSeconds();e.showMeridian&&(n=0===n||12===n?12:n%12),e.hours="h"===t?n:y(n,!c),"m"!==t&&(e.minutes=y(a)),e.meridian=l.getHours()<12?p[0]:p[1],"s"!==t&&(e.seconds=y(i)),e.meridian=l.getHours()<12?p[0]:p[1]}else e.hours=null,e.minutes=null,e.seconds=null,e.meridian=p[0]}function x(e){l=T(l,e),w()}function C(e,t){return T(e,60*t)}function T(e,t){var n=new Date(e.getTime()+1e3*t),a=new Date(e);return a.setHours(n.getHours(),n.getMinutes(),n.getSeconds()),a}function M(){return(null===e.hours||""===e.hours)&&(null===e.minutes||""===e.minutes)&&(!e.showSeconds||e.showSeconds&&(null===e.seconds||""===e.seconds))}n.secondStep&&s.push(e.$parent.$watch(a(n.secondStep),(function(e){b=+e}))),e.showSeconds=r.showSeconds,n.showSeconds&&s.push(e.$parent.$watch(a(n.showSeconds),(function(t){e.showSeconds=!!t}))),e.showMeridian=r.showMeridian,n.showMeridian&&s.push(e.$parent.$watch(a(n.showMeridian),(function(t){if(e.showMeridian=!!t,u.$error.time){var n=v(),a=$();angular.isDefined(n)&&angular.isDefined(a)&&(l.setHours(n),w())}else D()}))),this.setupMousewheelEvents=function(t,n,a){var i=function(e){e.originalEvent&&(e=e.originalEvent);var t=e.wheelDelta?e.wheelDelta:-e.deltaY;return e.detail||t>0};t.bind("mousewheel wheel",(function(t){g||e.$apply(i(t)?e.incrementHours():e.decrementHours()),t.preventDefault()})),n.bind("mousewheel wheel",(function(t){g||e.$apply(i(t)?e.incrementMinutes():e.decrementMinutes()),t.preventDefault()})),a.bind("mousewheel wheel",(function(t){g||e.$apply(i(t)?e.incrementSeconds():e.decrementSeconds()),t.preventDefault()}))},this.setupArrowkeyEvents=function(t,n,a){t.bind("keydown",(function(t){g||(38===t.which?(t.preventDefault(),e.incrementHours(),e.$apply()):40===t.which&&(t.preventDefault(),e.decrementHours(),e.$apply()))})),n.bind("keydown",(function(t){g||(38===t.which?(t.preventDefault(),e.incrementMinutes(),e.$apply()):40===t.which&&(t.preventDefault(),e.decrementMinutes(),e.$apply()))})),a.bind("keydown",(function(t){g||(38===t.which?(t.preventDefault(),e.incrementSeconds(),e.$apply()):40===t.which&&(t.preventDefault(),e.decrementSeconds(),e.$apply()))}))},this.setupInputEvents=function(t,n,a){if(e.readonlyInput)return e.updateHours=angular.noop,e.updateMinutes=angular.noop,void(e.updateSeconds=angular.noop);var i=function(t,n,a){u.$setViewValue(null),u.$setValidity("time",!1),angular.isDefined(t)&&(e.invalidHours=t),angular.isDefined(n)&&(e.invalidMinutes=n),angular.isDefined(a)&&(e.invalidSeconds=a)};e.updateHours=function(){var e=v(),t=$();u.$setDirty(),angular.isDefined(e)&&angular.isDefined(t)?(l.setHours(e),l.setMinutes(t),l<m||l>f?i(!0):w("h")):i(!0)},t.bind("blur",(function(t){u.$setTouched(),M()?k():null===e.hours||""===e.hours?i(!0):!e.invalidHours&&e.hours<10&&e.$apply((function(){e.hours=y(e.hours,!c)}))})),e.updateMinutes=function(){var e=$(),t=v();u.$setDirty(),angular.isDefined(e)&&angular.isDefined(t)?(l.setHours(t),l.setMinutes(e),l<m||l>f?i(void 0,!0):w("m")):i(void 0,!0)},n.bind("blur",(function(t){u.$setTouched(),M()?k():null===e.minutes?i(void 0,!0):!e.invalidMinutes&&e.minutes<10&&e.$apply((function(){e.minutes=y(e.minutes)}))})),e.updateSeconds=function(){var t=function(){var t=+e.seconds;return t>=0&&t<60?t:void 0}();u.$setDirty(),angular.isDefined(t)?(l.setSeconds(t),w("s")):i(void 0,void 0,!0)},a.bind("blur",(function(t){M()?k():!e.invalidSeconds&&e.seconds<10&&e.$apply((function(){e.seconds=y(e.seconds)}))}))},this.render=function(){var t=u.$viewValue;isNaN(t)?(u.$setValidity("time",!1),i.error('Timepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.')):(t&&(l=t),l<m||l>f?(u.$setValidity("time",!1),e.invalidHours=!0,e.invalidMinutes=!0):k(),D())},e.showSpinners=angular.isDefined(n.showSpinners)?e.$parent.$eval(n.showSpinners):r.showSpinners,e.incrementHours=function(){e.noIncrementHours()||x(60*d*60)},e.decrementHours=function(){e.noDecrementHours()||x(60*-d*60)},e.incrementMinutes=function(){e.noIncrementMinutes()||x(60*h)},e.decrementMinutes=function(){e.noDecrementMinutes()||x(60*-h)},e.incrementSeconds=function(){e.noIncrementSeconds()||x(b)},e.decrementSeconds=function(){e.noDecrementSeconds()||x(-b)},e.toggleMeridian=function(){var t=$(),n=v();e.noToggleMeridian()||(angular.isDefined(t)&&angular.isDefined(n)?x(720*(l.getHours()<12?60:-60)):e.meridian=e.meridian===p[0]?p[1]:p[0])},e.blur=function(){u.$setTouched()},e.$on("$destroy",(function(){for(;s.length;)s.shift()()}))}]).directive("uibTimepicker",["uibTimepickerConfig",function(e){return{require:["uibTimepicker","?^ngModel"],restrict:"A",controller:"UibTimepickerController",controllerAs:"timepicker",scope:{},templateUrl:function(t,n){return n.templateUrl||e.templateUrl},link:function(e,t,n,a){var i=a[0],o=a[1];o&&i.init(o,t.find("input"))}}}]),angular.module("ui.bootstrap.typeahead",["ui.bootstrap.debounce","ui.bootstrap.position"]).factory("uibTypeaheadParser",["$parse",function(e){var t=/^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w\d]*))\s+in\s+([\s\S]+?)$/;return{parse:function(n){var a=n.match(t);if(!a)throw new Error('Expected typeahead specification in form of "_modelValue_ (as _label_)? for _item_ in _collection_" but got "'+n+'".');return{itemName:a[3],source:e(a[4]),viewMapper:e(a[2]||a[1]),modelMapper:e(a[1])}}}}]).controller("UibTypeaheadController",["$scope","$element","$attrs","$compile","$parse","$q","$timeout","$document","$window","$rootScope","$$debounce","$uibPosition","uibTypeaheadParser",function(e,t,n,a,i,o,r,l,s,u,p,c,d){var m,f,h=[9,13,27,38,40],g=e.$eval(n.typeaheadMinLength);g||0===g||(g=1),e.$watch(n.typeaheadMinLength,(function(e){g=e||0===e?e:1}));var b=e.$eval(n.typeaheadWaitMs)||0,v=!1!==e.$eval(n.typeaheadEditable);e.$watch(n.typeaheadEditable,(function(e){v=!1!==e}));var $,y,w=i(n.typeaheadLoading).assign||angular.noop,k=n.typeaheadShouldSelect?i(n.typeaheadShouldSelect):function(e,t){var n=t.$event;return 13===n.which||9===n.which},D=i(n.typeaheadOnSelect),x=!!angular.isDefined(n.typeaheadSelectOnBlur)&&e.$eval(n.typeaheadSelectOnBlur),C=i(n.typeaheadNoResults).assign||angular.noop,T=n.typeaheadInputFormatter?i(n.typeaheadInputFormatter):void 0,M=!!n.typeaheadAppendToBody&&e.$eval(n.typeaheadAppendToBody),O=n.typeaheadAppendTo?e.$eval(n.typeaheadAppendTo):null,P=!1!==e.$eval(n.typeaheadFocusFirst),S=!!n.typeaheadSelectOnExact&&e.$eval(n.typeaheadSelectOnExact),E=i(n.typeaheadIsOpen).assign||angular.noop,I=e.$eval(n.typeaheadShowHint)||!1,A=i(n.ngModel),U=i(n.ngModel+"($$$p)"),N=d.parse(n.uibTypeahead),F=e.$new(),H=e.$on("$destroy",(function(){F.$destroy()}));F.$on("$destroy",H);var R,V,q="typeahead-"+F.$id+"-"+Math.floor(1e4*Math.random());t.attr({"aria-autocomplete":"list","aria-expanded":!1,"aria-owns":q}),I&&((R=angular.element("<div></div>")).css("position","relative"),t.after(R),(V=t.clone()).attr("placeholder",""),V.attr("tabindex","-1"),V.val(""),V.css({position:"absolute",top:"0px",left:"0px","border-color":"transparent","box-shadow":"none",opacity:1,background:"none 0% 0% / auto repeat scroll padding-box border-box rgb(255, 255, 255)",color:"#999"}),t.css({position:"relative","vertical-align":"top","background-color":"transparent"}),V.attr("id")&&V.removeAttr("id"),R.append(V),V.after(t));var z=angular.element("<div uib-typeahead-popup></div>");z.attr({id:q,matches:"matches",active:"activeIdx",select:"select(activeIdx, evt)","move-in-progress":"moveInProgress",query:"query",position:"position","assign-is-open":"assignIsOpen(isOpen)",debounce:"debounceUpdate"}),angular.isDefined(n.typeaheadTemplateUrl)&&z.attr("template-url",n.typeaheadTemplateUrl),angular.isDefined(n.typeaheadPopupTemplateUrl)&&z.attr("popup-template-url",n.typeaheadPopupTemplateUrl);var L=function(){F.matches=[],F.activeIdx=-1,t.attr("aria-expanded",!1),I&&V.val("")},Y=function(e){return q+"-option-"+e};F.$watch("activeIdx",(function(e){e<0?t.removeAttr("aria-activedescendant"):t.attr("aria-activedescendant",Y(e))}));var B=function(n,a){var i={$viewValue:n};w(e,!0),C(e,!1),o.when(N.source(e,i)).then((function(o){var r=n===m.$viewValue;if(r&&$)if(o&&o.length>0){F.activeIdx=P?0:-1,C(e,!1),F.matches.length=0;for(var l=0;l<o.length;l++)i[N.itemName]=o[l],F.matches.push({id:Y(l),label:N.viewMapper(F,i),model:o[l]});if(F.query=n,G(),t.attr("aria-expanded",!0),S&&1===F.matches.length&&function(e,t){return!!(F.matches.length>t&&e)&&e.toUpperCase()===F.matches[t].label.toUpperCase()}(n,0)&&(angular.isNumber(F.debounceUpdate)||angular.isObject(F.debounceUpdate)?p((function(){F.select(0,a)}),angular.isNumber(F.debounceUpdate)?F.debounceUpdate:F.debounceUpdate.default):F.select(0,a)),I){var s=F.matches[0].label;angular.isString(n)&&n.length>0&&s.slice(0,n.length).toUpperCase()===n.toUpperCase()?V.val(n+s.slice(n.length)):V.val("")}}else L(),C(e,!0);r&&w(e,!1)}),(function(){L(),w(e,!1),C(e,!0)}))};M&&(angular.element(s).on("resize",_),l.find("body").on("scroll",_));var W,j=p((function(){F.matches.length&&G(),F.moveInProgress=!1}),200);function _(){F.moveInProgress||(F.moveInProgress=!0,F.$digest()),j()}function G(){F.position=M?c.offset(t):c.position(t),F.position.top+=t.prop("offsetHeight")}F.moveInProgress=!1,F.query=void 0;var K=function(){W&&r.cancel(W)};L(),F.assignIsOpen=function(t){E(e,t)},F.select=function(a,i){var o,l,s={};y=!0,s[N.itemName]=l=F.matches[a].model,o=N.modelMapper(e,s),function(t,n){angular.isFunction(A(e))&&f&&f.$options&&f.$options.getterSetter?U(t,{$$$p:n}):A.assign(t,n)}(e,o),m.$setValidity("editable",!0),m.$setValidity("parse",!0),D(e,{$item:l,$model:o,$label:N.viewMapper(e,s),$event:i}),L(),!1!==F.$eval(n.typeaheadFocusOnSelect)&&r((function(){t[0].focus()}),0,!1)},t.on("keydown",(function(t){if(0!==F.matches.length&&-1!==h.indexOf(t.which)){var n,a=k(e,{$event:t});if(-1===F.activeIdx&&a||9===t.which&&t.shiftKey)return L(),void F.$digest();switch(t.preventDefault(),t.which){case 27:t.stopPropagation(),L(),e.$digest();break;case 38:F.activeIdx=(F.activeIdx>0?F.activeIdx:F.matches.length)-1,F.$digest(),(n=z[0].querySelectorAll(".uib-typeahead-match")[F.activeIdx]).parentNode.scrollTop=n.offsetTop;break;case 40:F.activeIdx=(F.activeIdx+1)%F.matches.length,F.$digest(),(n=z[0].querySelectorAll(".uib-typeahead-match")[F.activeIdx]).parentNode.scrollTop=n.offsetTop;break;default:a&&F.$apply((function(){angular.isNumber(F.debounceUpdate)||angular.isObject(F.debounceUpdate)?p((function(){F.select(F.activeIdx,t)}),angular.isNumber(F.debounceUpdate)?F.debounceUpdate:F.debounceUpdate.default):F.select(F.activeIdx,t)}))}}})),t.bind("focus",(function(e){$=!0,0!==g||m.$viewValue||r((function(){B(m.$viewValue,e)}),0)})),t.bind("blur",(function(e){x&&F.matches.length&&-1!==F.activeIdx&&!y&&(y=!0,F.$apply((function(){angular.isObject(F.debounceUpdate)&&angular.isNumber(F.debounceUpdate.blur)?p((function(){F.select(F.activeIdx,e)}),F.debounceUpdate.blur):F.select(F.activeIdx,e)}))),!v&&m.$error.editable&&(m.$setViewValue(),F.$apply((function(){m.$setValidity("editable",!0),m.$setValidity("parse",!0)})),t.val("")),$=!1,y=!1}));var X=function(n){t[0]!==n.target&&3!==n.which&&0!==F.matches.length&&(L(),u.$$phase||e.$digest())};l.on("click",X),e.$on("$destroy",(function(){l.off("click",X),(M||O)&&Z.remove(),M&&(angular.element(s).off("resize",_),l.find("body").off("scroll",_)),z.remove(),I&&R.remove()}));var Z=a(z)(F);M?l.find("body").append(Z):O?angular.element(O).eq(0).append(Z):t.after(Z),this.init=function(t,n){m=t,f=n,F.debounceUpdate=m.$options&&i(m.$options.debounce)(e),m.$parsers.unshift((function(t){return $=!0,0===g||t&&t.length>=g?b>0?(K(),function(e){W=r((function(){B(e)}),b)}(t)):B(t):(w(e,!1),K(),L()),v?t:t?void m.$setValidity("editable",!1):(m.$setValidity("editable",!0),null)})),m.$formatters.push((function(t){var n,a={};return v||m.$setValidity("editable",!0),T?(a.$model=t,T(e,a)):(a[N.itemName]=t,n=N.viewMapper(e,a),a[N.itemName]=void 0,n!==N.viewMapper(e,a)?n:t)}))}}]).directive("uibTypeahead",(function(){return{controller:"UibTypeaheadController",require:["ngModel","^?ngModelOptions","uibTypeahead"],link:function(e,t,n,a){a[2].init(a[0],a[1])}}})).directive("uibTypeaheadPopup",["$$debounce",function(e){return{scope:{matches:"=",query:"=",active:"=",position:"&",moveInProgress:"=",select:"&",assignIsOpen:"&",debounce:"&"},replace:!0,templateUrl:function(e,t){return t.popupTemplateUrl||"uib/template/typeahead/typeahead-popup.html"},link:function(t,n,a){t.templateUrl=a.templateUrl,t.isOpen=function(){var e=t.matches.length>0;return t.assignIsOpen({isOpen:e}),e},t.isActive=function(e){return t.active===e},t.selectActive=function(e){t.active=e},t.selectMatch=function(n,a){var i=t.debounce();angular.isNumber(i)||angular.isObject(i)?e((function(){t.select({activeIdx:n,evt:a})}),angular.isNumber(i)?i:i.default):t.select({activeIdx:n,evt:a})}}}}]).directive("uibTypeaheadMatch",["$templateRequest","$compile","$parse",function(e,t,n){return{scope:{index:"=",match:"=",query:"="},link:function(a,i,o){var r=n(o.templateUrl)(a.$parent)||"uib/template/typeahead/typeahead-match.html";e(r).then((function(e){var n=angular.element(e.trim());i.replaceWith(n),t(n)(a)}))}}}]).filter("uibTypeaheadHighlight",["$sce","$injector","$log",function(e,t,n){var a;return a=t.has("$sanitize"),function(t,i){return!a&&function(e){return/<.*>/g.test(e)}(t)&&n.warn("Unsafe use of typeahead please use ngSanitize"),t=i?(""+t).replace(new RegExp(i.replace(/([.?*+^$[\]\\(){}|-])/g,"\\$1"),"gi"),"<strong>$&</strong>"):t,a||(t=e.trustAsHtml(t)),t}}]),angular.module("uib/template/accordion/accordion-group.html",[]).run(["$templateCache",function(e){e.put("uib/template/accordion/accordion-group.html",'<div role="tab" id="{{::headingId}}" aria-selected="{{isOpen}}" class="panel-heading" ng-keypress="toggleOpen($event)">\n  <h4 class="panel-title">\n    <a role="button" data-toggle="collapse" href aria-expanded="{{isOpen}}" aria-controls="{{::panelId}}" tabindex="0" class="accordion-toggle" ng-click="toggleOpen()" uib-accordion-transclude="heading" ng-disabled="isDisabled" uib-tabindex-toggle><span uib-accordion-header ng-class="{\'text-muted\': isDisabled}">{{heading}}</span></a>\n  </h4>\n</div>\n<div id="{{::panelId}}" aria-labelledby="{{::headingId}}" aria-hidden="{{!isOpen}}" role="tabpanel" class="panel-collapse collapse" uib-collapse="!isOpen">\n  <div class="panel-body" ng-transclude></div>\n</div>\n')}]),angular.module("uib/template/accordion/accordion.html",[]).run(["$templateCache",function(e){e.put("uib/template/accordion/accordion.html",'<div role="tablist" class="panel-group" ng-transclude></div>')}]),angular.module("uib/template/alert/alert.html",[]).run(["$templateCache",function(e){e.put("uib/template/alert/alert.html",'<button ng-show="closeable" type="button" class="close" ng-click="close({$event: $event})">\n  <span aria-hidden="true">&times;</span>\n  <span class="sr-only">Close</span>\n</button>\n<div ng-transclude></div>\n')}]),angular.module("uib/template/carousel/carousel.html",[]).run(["$templateCache",function(e){e.put("uib/template/carousel/carousel.html",'<div class="carousel-inner" ng-transclude></div>\n<a role="button" href class="left carousel-control" ng-click="prev()" ng-class="{ disabled: isPrevDisabled() }" ng-show="slides.length > 1">\n  <span aria-hidden="true" class="glyphicon glyphicon-chevron-left"></span>\n  <span class="sr-only">previous</span>\n</a>\n<a role="button" href class="right carousel-control" ng-click="next()" ng-class="{ disabled: isNextDisabled() }" ng-show="slides.length > 1">\n  <span aria-hidden="true" class="glyphicon glyphicon-chevron-right"></span>\n  <span class="sr-only">next</span>\n</a>\n<ol class="carousel-indicators" ng-show="slides.length > 1">\n  <li ng-repeat="slide in slides | orderBy:indexOfSlide track by $index" ng-class="{ active: isActive(slide) }" ng-click="select(slide)">\n    <span class="sr-only">slide {{ $index + 1 }} of {{ slides.length }}<span ng-if="isActive(slide)">, currently active</span></span>\n  </li>\n</ol>\n')}]),angular.module("uib/template/carousel/slide.html",[]).run(["$templateCache",function(e){e.put("uib/template/carousel/slide.html",'<div class="text-center" ng-transclude></div>\n')}]),angular.module("uib/template/datepicker/datepicker.html",[]).run(["$templateCache",function(e){e.put("uib/template/datepicker/datepicker.html",'<div ng-switch="datepickerMode">\n  <div uib-daypicker ng-switch-when="day" tabindex="0" class="uib-daypicker"></div>\n  <div uib-monthpicker ng-switch-when="month" tabindex="0" class="uib-monthpicker"></div>\n  <div uib-yearpicker ng-switch-when="year" tabindex="0" class="uib-yearpicker"></div>\n</div>\n')}]),angular.module("uib/template/datepicker/day.html",[]).run(["$templateCache",function(e){e.put("uib/template/datepicker/day.html",'<table role="grid" aria-labelledby="{{::uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left uib-left" ng-click="move(-1)" tabindex="-1"><i aria-hidden="true" class="glyphicon glyphicon-chevron-left"></i><span class="sr-only">previous</span></button></th>\n      <th colspan="{{::5 + showWeeks}}"><button id="{{::uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm uib-title" ng-click="toggleMode()" ng-disabled="datepickerMode === maxMode" tabindex="-1"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right uib-right" ng-click="move(1)" tabindex="-1"><i aria-hidden="true" class="glyphicon glyphicon-chevron-right"></i><span class="sr-only">next</span></button></th>\n    </tr>\n    <tr>\n      <th ng-if="showWeeks" class="text-center"></th>\n      <th ng-repeat="label in ::labels track by $index" class="text-center"><small aria-label="{{::label.full}}">{{::label.abbr}}</small></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr class="uib-weeks" ng-repeat="row in rows track by $index" role="row">\n      <td ng-if="showWeeks" class="text-center h6"><em>{{ weekNumbers[$index] }}</em></td>\n      <td ng-repeat="dt in row" class="uib-day text-center" role="gridcell"\n        id="{{::dt.uid}}"\n        ng-class="::dt.customClass">\n        <button type="button" class="btn btn-default btn-sm"\n          uib-is-class="\n            \'btn-info\' for selectedDt,\n            \'active\' for activeDt\n            on dt"\n          ng-click="select(dt.date)"\n          ng-disabled="::dt.disabled"\n          tabindex="-1"><span ng-class="::{\'text-muted\': dt.secondary, \'text-info\': dt.current}">{{::dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("uib/template/datepicker/month.html",[]).run(["$templateCache",function(e){e.put("uib/template/datepicker/month.html",'<table role="grid" aria-labelledby="{{::uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left uib-left" ng-click="move(-1)" tabindex="-1"><i aria-hidden="true" class="glyphicon glyphicon-chevron-left"></i><span class="sr-only">previous</span></button></th>\n      <th colspan="{{::yearHeaderColspan}}"><button id="{{::uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm uib-title" ng-click="toggleMode()" ng-disabled="datepickerMode === maxMode" tabindex="-1"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right uib-right" ng-click="move(1)" tabindex="-1"><i aria-hidden="true" class="glyphicon glyphicon-chevron-right"></i><span class="sr-only">next</span></i></button></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr class="uib-months" ng-repeat="row in rows track by $index" role="row">\n      <td ng-repeat="dt in row" class="uib-month text-center" role="gridcell"\n        id="{{::dt.uid}}"\n        ng-class="::dt.customClass">\n        <button type="button" class="btn btn-default"\n          uib-is-class="\n            \'btn-info\' for selectedDt,\n            \'active\' for activeDt\n            on dt"\n          ng-click="select(dt.date)"\n          ng-disabled="::dt.disabled"\n          tabindex="-1"><span ng-class="::{\'text-info\': dt.current}">{{::dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("uib/template/datepicker/year.html",[]).run(["$templateCache",function(e){e.put("uib/template/datepicker/year.html",'<table role="grid" aria-labelledby="{{::uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left uib-left" ng-click="move(-1)" tabindex="-1"><i aria-hidden="true" class="glyphicon glyphicon-chevron-left"></i><span class="sr-only">previous</span></button></th>\n      <th colspan="{{::columns - 2}}"><button id="{{::uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm uib-title" ng-click="toggleMode()" ng-disabled="datepickerMode === maxMode" tabindex="-1"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right uib-right" ng-click="move(1)" tabindex="-1"><i aria-hidden="true" class="glyphicon glyphicon-chevron-right"></i><span class="sr-only">next</span></button></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr class="uib-years" ng-repeat="row in rows track by $index" role="row">\n      <td ng-repeat="dt in row" class="uib-year text-center" role="gridcell"\n        id="{{::dt.uid}}"\n        ng-class="::dt.customClass">\n        <button type="button" class="btn btn-default"\n          uib-is-class="\n            \'btn-info\' for selectedDt,\n            \'active\' for activeDt\n            on dt"\n          ng-click="select(dt.date)"\n          ng-disabled="::dt.disabled"\n          tabindex="-1"><span ng-class="::{\'text-info\': dt.current}">{{::dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("uib/template/datepickerPopup/popup.html",[]).run(["$templateCache",function(e){e.put("uib/template/datepickerPopup/popup.html",'<ul role="presentation" class="uib-datepicker-popup dropdown-menu uib-position-measure" dropdown-nested ng-if="isOpen" ng-keydown="keydown($event)" ng-click="$event.stopPropagation()">\n  <li ng-transclude></li>\n  <li ng-if="showButtonBar" class="uib-button-bar">\n    <span class="btn-group pull-left">\n      <button type="button" class="btn btn-sm btn-info uib-datepicker-current" ng-click="select(\'today\', $event)" ng-disabled="isDisabled(\'today\')">{{ getText(\'current\') }}</button>\n      <button type="button" class="btn btn-sm btn-danger uib-clear" ng-click="select(null, $event)">{{ getText(\'clear\') }}</button>\n    </span>\n    <button type="button" class="btn btn-sm btn-success pull-right uib-close" ng-click="close($event)">{{ getText(\'close\') }}</button>\n  </li>\n</ul>\n')}]),angular.module("uib/template/modal/window.html",[]).run(["$templateCache",function(e){e.put("uib/template/modal/window.html","<div class=\"modal-dialog {{size ? 'modal-' + size : ''}}\"><div class=\"modal-content\" uib-modal-transclude></div></div>\n")}]),angular.module("uib/template/pager/pager.html",[]).run(["$templateCache",function(e){e.put("uib/template/pager/pager.html",'<li ng-class="{disabled: noPrevious()||ngDisabled, previous: align}"><a href ng-click="selectPage(page - 1, $event)" ng-disabled="noPrevious()||ngDisabled" uib-tabindex-toggle>{{::getText(\'previous\')}}</a></li>\n<li ng-class="{disabled: noNext()||ngDisabled, next: align}"><a href ng-click="selectPage(page + 1, $event)" ng-disabled="noNext()||ngDisabled" uib-tabindex-toggle>{{::getText(\'next\')}}</a></li>\n')}]),angular.module("uib/template/pagination/pagination.html",[]).run(["$templateCache",function(e){e.put("uib/template/pagination/pagination.html",'<li ng-if="::boundaryLinks" ng-class="{disabled: noPrevious()||ngDisabled}" class="pagination-first"><a href ng-click="selectPage(1, $event)" ng-disabled="noPrevious()||ngDisabled" uib-tabindex-toggle>{{::getText(\'first\')}}</a></li>\n<li ng-if="::directionLinks" ng-class="{disabled: noPrevious()||ngDisabled}" class="pagination-prev"><a href ng-click="selectPage(page - 1, $event)" ng-disabled="noPrevious()||ngDisabled" uib-tabindex-toggle>{{::getText(\'previous\')}}</a></li>\n<li ng-repeat="page in pages track by $index" ng-class="{active: page.active,disabled: ngDisabled&&!page.active}" class="pagination-page"><a href ng-click="selectPage(page.number, $event)" ng-disabled="ngDisabled&&!page.active" uib-tabindex-toggle>{{page.text}}</a></li>\n<li ng-if="::directionLinks" ng-class="{disabled: noNext()||ngDisabled}" class="pagination-next"><a href ng-click="selectPage(page + 1, $event)" ng-disabled="noNext()||ngDisabled" uib-tabindex-toggle>{{::getText(\'next\')}}</a></li>\n<li ng-if="::boundaryLinks" ng-class="{disabled: noNext()||ngDisabled}" class="pagination-last"><a href ng-click="selectPage(totalPages, $event)" ng-disabled="noNext()||ngDisabled" uib-tabindex-toggle>{{::getText(\'last\')}}</a></li>\n')}]),angular.module("uib/template/tooltip/tooltip-html-popup.html",[]).run(["$templateCache",function(e){e.put("uib/template/tooltip/tooltip-html-popup.html",'<div class="tooltip-arrow"></div>\n<div class="tooltip-inner" ng-bind-html="contentExp()"></div>\n')}]),angular.module("uib/template/tooltip/tooltip-popup.html",[]).run(["$templateCache",function(e){e.put("uib/template/tooltip/tooltip-popup.html",'<div class="tooltip-arrow"></div>\n<div class="tooltip-inner" ng-bind="content"></div>\n')}]),angular.module("uib/template/tooltip/tooltip-template-popup.html",[]).run(["$templateCache",function(e){e.put("uib/template/tooltip/tooltip-template-popup.html",'<div class="tooltip-arrow"></div>\n<div class="tooltip-inner"\n  uib-tooltip-template-transclude="contentExp()"\n  tooltip-template-transclude-scope="originScope()"></div>\n')}]),angular.module("uib/template/popover/popover-html.html",[]).run(["$templateCache",function(e){e.put("uib/template/popover/popover-html.html",'<div class="arrow"></div>\n\n<div class="popover-inner">\n    <h3 class="popover-title" ng-bind="uibTitle" ng-if="uibTitle"></h3>\n    <div class="popover-content" ng-bind-html="contentExp()"></div>\n</div>\n')}]),angular.module("uib/template/popover/popover-template.html",[]).run(["$templateCache",function(e){e.put("uib/template/popover/popover-template.html",'<div class="arrow"></div>\n\n<div class="popover-inner">\n    <h3 class="popover-title" ng-bind="uibTitle" ng-if="uibTitle"></h3>\n    <div class="popover-content"\n      uib-tooltip-template-transclude="contentExp()"\n      tooltip-template-transclude-scope="originScope()"></div>\n</div>\n')}]),angular.module("uib/template/popover/popover.html",[]).run(["$templateCache",function(e){e.put("uib/template/popover/popover.html",'<div class="arrow"></div>\n\n<div class="popover-inner">\n    <h3 class="popover-title" ng-bind="uibTitle" ng-if="uibTitle"></h3>\n    <div class="popover-content" ng-bind="content"></div>\n</div>\n')}]),angular.module("uib/template/progressbar/bar.html",[]).run(["$templateCache",function(e){e.put("uib/template/progressbar/bar.html",'<div class="progress-bar" ng-class="type && \'progress-bar-\' + type" role="progressbar" aria-valuenow="{{value}}" aria-valuemin="0" aria-valuemax="{{max}}" ng-style="{width: (percent < 100 ? percent : 100) + \'%\'}" aria-valuetext="{{percent | number:0}}%" aria-labelledby="{{::title}}" ng-transclude></div>\n')}]),angular.module("uib/template/progressbar/progress.html",[]).run(["$templateCache",function(e){e.put("uib/template/progressbar/progress.html",'<div class="progress" ng-transclude aria-labelledby="{{::title}}"></div>')}]),angular.module("uib/template/progressbar/progressbar.html",[]).run(["$templateCache",function(e){e.put("uib/template/progressbar/progressbar.html",'<div class="progress">\n  <div class="progress-bar" ng-class="type && \'progress-bar-\' + type" role="progressbar" aria-valuenow="{{value}}" aria-valuemin="0" aria-valuemax="{{max}}" ng-style="{width: (percent < 100 ? percent : 100) + \'%\'}" aria-valuetext="{{percent | number:0}}%" aria-labelledby="{{::title}}" ng-transclude></div>\n</div>\n')}]),angular.module("uib/template/rating/rating.html",[]).run(["$templateCache",function(e){e.put("uib/template/rating/rating.html",'<span ng-mouseleave="reset()" ng-keydown="onKeydown($event)" tabindex="0" role="slider" aria-valuemin="0" aria-valuemax="{{range.length}}" aria-valuenow="{{value}}" aria-valuetext="{{title}}">\n    <span ng-repeat-start="r in range track by $index" class="sr-only">({{ $index < value ? \'*\' : \' \' }})</span>\n    <i ng-repeat-end ng-mouseenter="enter($index + 1)" ng-click="rate($index + 1)" class="glyphicon" ng-class="$index < value && (r.stateOn || \'glyphicon-star\') || (r.stateOff || \'glyphicon-star-empty\')" ng-attr-title="{{r.title}}"></i>\n</span>\n')}]),angular.module("uib/template/tabs/tab.html",[]).run(["$templateCache",function(e){e.put("uib/template/tabs/tab.html",'<li ng-class="[{active: active, disabled: disabled}, classes]" class="uib-tab nav-item">\n  <a href ng-click="select($event)" class="nav-link" uib-tab-heading-transclude>{{heading}}</a>\n</li>\n')}]),angular.module("uib/template/tabs/tabset.html",[]).run(["$templateCache",function(e){e.put("uib/template/tabs/tabset.html",'<div>\n  <ul class="nav nav-{{tabset.type || \'tabs\'}}" ng-class="{\'nav-stacked\': vertical, \'nav-justified\': justified}" ng-transclude></ul>\n  <div class="tab-content">\n    <div class="tab-pane"\n         ng-repeat="tab in tabset.tabs"\n         ng-class="{active: tabset.active === tab.index}"\n         uib-tab-content-transclude="tab">\n    </div>\n  </div>\n</div>\n')}]),angular.module("uib/template/timepicker/timepicker.html",[]).run(["$templateCache",function(e){e.put("uib/template/timepicker/timepicker.html",'<table class="uib-timepicker">\n  <tbody>\n    <tr class="text-center" ng-show="::showSpinners">\n      <td class="uib-increment hours"><a ng-click="incrementHours()" ng-class="{disabled: noIncrementHours()}" class="btn btn-link" ng-disabled="noIncrementHours()" tabindex="-1"><span class="glyphicon glyphicon-chevron-up"></span></a></td>\n      <td>&nbsp;</td>\n      <td class="uib-increment minutes"><a ng-click="incrementMinutes()" ng-class="{disabled: noIncrementMinutes()}" class="btn btn-link" ng-disabled="noIncrementMinutes()" tabindex="-1"><span class="glyphicon glyphicon-chevron-up"></span></a></td>\n      <td ng-show="showSeconds">&nbsp;</td>\n      <td ng-show="showSeconds" class="uib-increment seconds"><a ng-click="incrementSeconds()" ng-class="{disabled: noIncrementSeconds()}" class="btn btn-link" ng-disabled="noIncrementSeconds()" tabindex="-1"><span class="glyphicon glyphicon-chevron-up"></span></a></td>\n      <td ng-show="showMeridian"></td>\n    </tr>\n    <tr>\n      <td class="form-group uib-time hours" ng-class="{\'has-error\': invalidHours}">\n        <input type="text" placeholder="HH" ng-model="hours" ng-change="updateHours()" class="form-control text-center" ng-readonly="::readonlyInput" maxlength="2" tabindex="{{::tabindex}}" ng-disabled="noIncrementHours()" ng-blur="blur()">\n      </td>\n      <td class="uib-separator">:</td>\n      <td class="form-group uib-time minutes" ng-class="{\'has-error\': invalidMinutes}">\n        <input type="text" placeholder="MM" ng-model="minutes" ng-change="updateMinutes()" class="form-control text-center" ng-readonly="::readonlyInput" maxlength="2" tabindex="{{::tabindex}}" ng-disabled="noIncrementMinutes()" ng-blur="blur()">\n      </td>\n      <td ng-show="showSeconds" class="uib-separator">:</td>\n      <td class="form-group uib-time seconds" ng-class="{\'has-error\': invalidSeconds}" ng-show="showSeconds">\n        <input type="text" placeholder="SS" ng-model="seconds" ng-change="updateSeconds()" class="form-control text-center" ng-readonly="readonlyInput" maxlength="2" tabindex="{{::tabindex}}" ng-disabled="noIncrementSeconds()" ng-blur="blur()">\n      </td>\n      <td ng-show="showMeridian" class="uib-time am-pm"><button type="button" ng-class="{disabled: noToggleMeridian()}" class="btn btn-default text-center" ng-click="toggleMeridian()" ng-disabled="noToggleMeridian()" tabindex="{{::tabindex}}">{{meridian}}</button></td>\n    </tr>\n    <tr class="text-center" ng-show="::showSpinners">\n      <td class="uib-decrement hours"><a ng-click="decrementHours()" ng-class="{disabled: noDecrementHours()}" class="btn btn-link" ng-disabled="noDecrementHours()" tabindex="-1"><span class="glyphicon glyphicon-chevron-down"></span></a></td>\n      <td>&nbsp;</td>\n      <td class="uib-decrement minutes"><a ng-click="decrementMinutes()" ng-class="{disabled: noDecrementMinutes()}" class="btn btn-link" ng-disabled="noDecrementMinutes()" tabindex="-1"><span class="glyphicon glyphicon-chevron-down"></span></a></td>\n      <td ng-show="showSeconds">&nbsp;</td>\n      <td ng-show="showSeconds" class="uib-decrement seconds"><a ng-click="decrementSeconds()" ng-class="{disabled: noDecrementSeconds()}" class="btn btn-link" ng-disabled="noDecrementSeconds()" tabindex="-1"><span class="glyphicon glyphicon-chevron-down"></span></a></td>\n      <td ng-show="showMeridian"></td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("uib/template/typeahead/typeahead-match.html",[]).run(["$templateCache",function(e){e.put("uib/template/typeahead/typeahead-match.html",'<a href\n   tabindex="-1"\n   ng-bind-html="match.label | uibTypeaheadHighlight:query"\n   ng-attr-title="{{match.label}}"></a>\n')}]),angular.module("uib/template/typeahead/typeahead-popup.html",[]).run(["$templateCache",function(e){e.put("uib/template/typeahead/typeahead-popup.html",'<ul class="dropdown-menu" ng-show="isOpen() && !moveInProgress" ng-style="{top: position().top+\'px\', left: position().left+\'px\'}" role="listbox" aria-hidden="{{!isOpen()}}">\n    <li class="uib-typeahead-match" ng-repeat="match in matches track by $index" ng-class="{active: isActive($index) }" ng-mouseenter="selectActive($index)" ng-click="selectMatch($index, $event)" role="option" id="{{::match.id}}">\n        <div uib-typeahead-match index="$index" match="match" query="query" template-url="templateUrl"></div>\n    </li>\n</ul>\n')}]),angular.module("ui.bootstrap.carousel").run((function(){!angular.$$csp().noInlineStyle&&!angular.$$uibCarouselCss&&angular.element(document).find("head").prepend('<style type="text/css">.ng-animate.item:not(.left):not(.right){-webkit-transition:0s ease-in-out left;transition:0s ease-in-out left}</style>'),angular.$$uibCarouselCss=!0})),angular.module("ui.bootstrap.datepicker").run((function(){!angular.$$csp().noInlineStyle&&!angular.$$uibDatepickerCss&&angular.element(document).find("head").prepend('<style type="text/css">.uib-datepicker .uib-title{width:100%;}.uib-day button,.uib-month button,.uib-year button{min-width:100%;}.uib-left,.uib-right{width:100%}</style>'),angular.$$uibDatepickerCss=!0})),angular.module("ui.bootstrap.position").run((function(){!angular.$$csp().noInlineStyle&&!angular.$$uibPositionCss&&angular.element(document).find("head").prepend('<style type="text/css">.uib-position-measure{display:block !important;visibility:hidden !important;position:absolute !important;top:-9999px !important;left:-9999px !important;}.uib-position-scrollbar-measure{position:absolute !important;top:-9999px !important;width:50px !important;height:50px !important;overflow:scroll !important;}.uib-position-body-scrollbar-measure{overflow:scroll !important;}</style>'),angular.$$uibPositionCss=!0})),angular.module("ui.bootstrap.datepickerPopup").run((function(){!angular.$$csp().noInlineStyle&&!angular.$$uibDatepickerpopupCss&&angular.element(document).find("head").prepend('<style type="text/css">.uib-datepicker-popup.dropdown-menu{display:block;float:none;margin:0;}.uib-button-bar{padding:10px 9px 2px;}</style>'),angular.$$uibDatepickerpopupCss=!0})),angular.module("ui.bootstrap.tooltip").run((function(){!angular.$$csp().noInlineStyle&&!angular.$$uibTooltipCss&&angular.element(document).find("head").prepend('<style type="text/css">[uib-tooltip-popup].tooltip.top-left > .tooltip-arrow,[uib-tooltip-popup].tooltip.top-right > .tooltip-arrow,[uib-tooltip-popup].tooltip.bottom-left > .tooltip-arrow,[uib-tooltip-popup].tooltip.bottom-right > .tooltip-arrow,[uib-tooltip-popup].tooltip.left-top > .tooltip-arrow,[uib-tooltip-popup].tooltip.left-bottom > .tooltip-arrow,[uib-tooltip-popup].tooltip.right-top > .tooltip-arrow,[uib-tooltip-popup].tooltip.right-bottom > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.top-left > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.top-right > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.bottom-left > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.bottom-right > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.left-top > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.left-bottom > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.right-top > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.right-bottom > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.top-left > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.top-right > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.bottom-left > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.bottom-right > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.left-top > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.left-bottom > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.right-top > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.right-bottom > .tooltip-arrow,[uib-popover-popup].popover.top-left > .arrow,[uib-popover-popup].popover.top-right > .arrow,[uib-popover-popup].popover.bottom-left > .arrow,[uib-popover-popup].popover.bottom-right > .arrow,[uib-popover-popup].popover.left-top > .arrow,[uib-popover-popup].popover.left-bottom > .arrow,[uib-popover-popup].popover.right-top > .arrow,[uib-popover-popup].popover.right-bottom > .arrow,[uib-popover-html-popup].popover.top-left > .arrow,[uib-popover-html-popup].popover.top-right > .arrow,[uib-popover-html-popup].popover.bottom-left > .arrow,[uib-popover-html-popup].popover.bottom-right > .arrow,[uib-popover-html-popup].popover.left-top > .arrow,[uib-popover-html-popup].popover.left-bottom > .arrow,[uib-popover-html-popup].popover.right-top > .arrow,[uib-popover-html-popup].popover.right-bottom > .arrow,[uib-popover-template-popup].popover.top-left > .arrow,[uib-popover-template-popup].popover.top-right > .arrow,[uib-popover-template-popup].popover.bottom-left > .arrow,[uib-popover-template-popup].popover.bottom-right > .arrow,[uib-popover-template-popup].popover.left-top > .arrow,[uib-popover-template-popup].popover.left-bottom > .arrow,[uib-popover-template-popup].popover.right-top > .arrow,[uib-popover-template-popup].popover.right-bottom > .arrow{top:auto;bottom:auto;left:auto;right:auto;margin:0;}[uib-popover-popup].popover,[uib-popover-html-popup].popover,[uib-popover-template-popup].popover{display:block !important;}</style>'),angular.$$uibTooltipCss=!0})),angular.module("ui.bootstrap.timepicker").run((function(){!angular.$$csp().noInlineStyle&&!angular.$$uibTimepickerCss&&angular.element(document).find("head").prepend('<style type="text/css">.uib-time input{width:50px;}</style>'),angular.$$uibTimepickerCss=!0})),angular.module("ui.bootstrap.typeahead").run((function(){!angular.$$csp().noInlineStyle&&!angular.$$uibTypeaheadCss&&angular.element(document).find("head").prepend('<style type="text/css">[uib-typeahead-popup].dropdown-menu{display:block;}</style>'),angular.$$uibTypeaheadCss=!0}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,
